/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type DividendStruct = {
  startDate: BigNumberish;
  recordDate: BigNumberish;
  totalShare: BigNumberish;
  tokens: string[];
  amounts: BigNumberish[];
};

export type DividendStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string[],
  BigNumber[]
] & {
  startDate: BigNumber;
  recordDate: BigNumber;
  totalShare: BigNumber;
  tokens: string[];
  amounts: BigNumber[];
};

export type UnstakingRequestStruct = {
  id: BigNumberish;
  amount: BigNumberish;
  requestTs: BigNumberish;
  isClaimed: boolean;
};

export type UnstakingRequestStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  boolean
] & {
  id: BigNumber;
  amount: BigNumber;
  requestTs: BigNumber;
  isClaimed: boolean;
};

export type DividendSnapshotStruct = { isPaid: boolean; share: BigNumberish };

export type DividendSnapshotStructOutput = [boolean, BigNumber] & {
  isPaid: boolean;
  share: BigNumber;
};

export interface IStakedStoneInterface extends utils.Interface {
  functions: {
    "accumulativeUserReward(address)": FunctionFragment;
    "allocatedDividend(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claimDividend(uint256)": FunctionFragment;
    "claimReward()": FunctionFragment;
    "claimableReward(address)": FunctionFragment;
    "dividendInfo(uint256)": FunctionFragment;
    "reStake()": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "totalDividendEpoch()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "unstakingRequestByIndex(address,uint256)": FunctionFragment;
    "unstakingRequestCounts(address)": FunctionFragment;
    "userDividendSnapshot(address,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accumulativeUserReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allocatedDividend",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimDividend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimableReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "dividendInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "reStake", values?: undefined): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "totalDividendEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakingRequestByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakingRequestCounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userDividendSnapshot",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accumulativeUserReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocatedDividend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimDividend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dividendInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDividendEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakingRequestByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakingRequestCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDividendSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CancelReward(address,uint256,uint256)": EventFragment;
    "Claim(address,uint256)": EventFragment;
    "ClaimDividend(address,uint256,address,uint256)": EventFragment;
    "DepositDividend(uint256,address,uint256)": EventFragment;
    "DepositReward(address,uint256,uint256)": EventFragment;
    "ExecuteDividend(uint256,address[],uint256[])": EventFragment;
    "ResetDividend(uint256)": EventFragment;
    "SetDividend(uint256,uint256,uint256,uint256)": EventFragment;
    "Stake(address,uint256)": EventFragment;
    "Unstake(address,uint256,uint256)": EventFragment;
    "UpdateCoolDown(uint256,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimDividend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositDividend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteDividend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetDividend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDividend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCoolDown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type CancelRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { operator: string; weekStartTime: BigNumber; amount: BigNumber }
>;

export type CancelRewardEventFilter = TypedEventFilter<CancelRewardEvent>;

export type ClaimEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; amount: BigNumber }
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export type ClaimDividendEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  { owner: string; epoch: BigNumber; token: string; amount: BigNumber }
>;

export type ClaimDividendEventFilter = TypedEventFilter<ClaimDividendEvent>;

export type DepositDividendEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { dividendId: BigNumber; token: string; amount: BigNumber }
>;

export type DepositDividendEventFilter = TypedEventFilter<DepositDividendEvent>;

export type DepositRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { operator: string; weekStartTime: BigNumber; amount: BigNumber }
>;

export type DepositRewardEventFilter = TypedEventFilter<DepositRewardEvent>;

export type ExecuteDividendEvent = TypedEvent<
  [BigNumber, string[], BigNumber[]],
  { dividendId: BigNumber; token: string[]; amount: BigNumber[] }
>;

export type ExecuteDividendEventFilter = TypedEventFilter<ExecuteDividendEvent>;

export type ResetDividendEvent = TypedEvent<
  [BigNumber],
  { dividendId: BigNumber }
>;

export type ResetDividendEventFilter = TypedEventFilter<ResetDividendEvent>;

export type SetDividendEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    dividendId: BigNumber;
    startTime: BigNumber;
    recordDate: BigNumber;
    totalShare: BigNumber;
  }
>;

export type SetDividendEventFilter = TypedEventFilter<SetDividendEvent>;

export type StakeEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; amount: BigNumber }
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export type UnstakeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { owner: string; amount: BigNumber; requestId: BigNumber }
>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export type UpdateCoolDownEvent = TypedEvent<
  [BigNumber, BigNumber],
  { prev: BigNumber; curr: BigNumber }
>;

export type UpdateCoolDownEventFilter = TypedEventFilter<UpdateCoolDownEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; amount: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface IStakedStone extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakedStoneInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accumulativeUserReward(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allocatedDividend(
      owner: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string[], BigNumber[]] & {
        isPaid: boolean;
        tokens: string[];
        amounts: BigNumber[];
      }
    >;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    claimDividend(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableReward(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dividendInfo(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DividendStructOutput]>;

    reStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalDividendEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakingRequestByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[UnstakingRequestStructOutput]>;

    unstakingRequestCounts(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userDividendSnapshot(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DividendSnapshotStructOutput]>;

    withdraw(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accumulativeUserReward(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allocatedDividend(
    owner: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string[], BigNumber[]] & {
      isPaid: boolean;
      tokens: string[];
      amounts: BigNumber[];
    }
  >;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimDividend(
    epoch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableReward(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  dividendInfo(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DividendStructOutput>;

  reStake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalDividendEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  unstake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakingRequestByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<UnstakingRequestStructOutput>;

  unstakingRequestCounts(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userDividendSnapshot(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DividendSnapshotStructOutput>;

  withdraw(
    requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accumulativeUserReward(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allocatedDividend(
      owner: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string[], BigNumber[]] & {
        isPaid: boolean;
        tokens: string[];
        amounts: BigNumber[];
      }
    >;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimDividend(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(overrides?: CallOverrides): Promise<BigNumber>;

    claimableReward(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dividendInfo(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DividendStructOutput>;

    reStake(overrides?: CallOverrides): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    totalDividendEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unstakingRequestByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<UnstakingRequestStructOutput>;

    unstakingRequestCounts(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDividendSnapshot(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DividendSnapshotStructOutput>;

    withdraw(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "CancelReward(address,uint256,uint256)"(
      operator?: string | null,
      weekStartTime?: BigNumberish | null,
      amount?: null
    ): CancelRewardEventFilter;
    CancelReward(
      operator?: string | null,
      weekStartTime?: BigNumberish | null,
      amount?: null
    ): CancelRewardEventFilter;

    "Claim(address,uint256)"(
      owner?: string | null,
      amount?: null
    ): ClaimEventFilter;
    Claim(owner?: string | null, amount?: null): ClaimEventFilter;

    "ClaimDividend(address,uint256,address,uint256)"(
      owner?: string | null,
      epoch?: BigNumberish | null,
      token?: null,
      amount?: null
    ): ClaimDividendEventFilter;
    ClaimDividend(
      owner?: string | null,
      epoch?: BigNumberish | null,
      token?: null,
      amount?: null
    ): ClaimDividendEventFilter;

    "DepositDividend(uint256,address,uint256)"(
      dividendId?: BigNumberish | null,
      token?: null,
      amount?: null
    ): DepositDividendEventFilter;
    DepositDividend(
      dividendId?: BigNumberish | null,
      token?: null,
      amount?: null
    ): DepositDividendEventFilter;

    "DepositReward(address,uint256,uint256)"(
      operator?: string | null,
      weekStartTime?: BigNumberish | null,
      amount?: null
    ): DepositRewardEventFilter;
    DepositReward(
      operator?: string | null,
      weekStartTime?: BigNumberish | null,
      amount?: null
    ): DepositRewardEventFilter;

    "ExecuteDividend(uint256,address[],uint256[])"(
      dividendId?: BigNumberish | null,
      token?: null,
      amount?: null
    ): ExecuteDividendEventFilter;
    ExecuteDividend(
      dividendId?: BigNumberish | null,
      token?: null,
      amount?: null
    ): ExecuteDividendEventFilter;

    "ResetDividend(uint256)"(
      dividendId?: BigNumberish | null
    ): ResetDividendEventFilter;
    ResetDividend(dividendId?: BigNumberish | null): ResetDividendEventFilter;

    "SetDividend(uint256,uint256,uint256,uint256)"(
      dividendId?: BigNumberish | null,
      startTime?: null,
      recordDate?: null,
      totalShare?: null
    ): SetDividendEventFilter;
    SetDividend(
      dividendId?: BigNumberish | null,
      startTime?: null,
      recordDate?: null,
      totalShare?: null
    ): SetDividendEventFilter;

    "Stake(address,uint256)"(
      owner?: string | null,
      amount?: null
    ): StakeEventFilter;
    Stake(owner?: string | null, amount?: null): StakeEventFilter;

    "Unstake(address,uint256,uint256)"(
      owner?: string | null,
      amount?: null,
      requestId?: null
    ): UnstakeEventFilter;
    Unstake(
      owner?: string | null,
      amount?: null,
      requestId?: null
    ): UnstakeEventFilter;

    "UpdateCoolDown(uint256,uint256)"(
      prev?: null,
      curr?: null
    ): UpdateCoolDownEventFilter;
    UpdateCoolDown(prev?: null, curr?: null): UpdateCoolDownEventFilter;

    "Withdraw(address,uint256)"(
      owner?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(owner?: string | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    accumulativeUserReward(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allocatedDividend(
      owner: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimDividend(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableReward(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dividendInfo(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalDividendEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakingRequestByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstakingRequestCounts(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDividendSnapshot(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accumulativeUserReward(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allocatedDividend(
      owner: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimDividend(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableReward(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dividendInfo(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalDividendEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakingRequestByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstakingRequestCounts(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userDividendSnapshot(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
