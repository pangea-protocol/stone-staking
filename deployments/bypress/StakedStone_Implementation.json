{
  "address": "0xBfA59A3824441834EA3c2d5B286e4dA3446A66A1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "weekStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CancelReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimDividend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dividendId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositDividend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "weekStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dividendId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "token",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        }
      ],
      "name": "ExecuteDividend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dividendId",
          "type": "uint256"
        }
      ],
      "name": "ResetDividend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dividendId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "recordDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShare",
          "type": "uint256"
        }
      ],
      "name": "SetDividend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prev",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "curr",
          "type": "uint256"
        }
      ],
      "name": "UpdateCoolDown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accumulativeUserReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "allocatedDividend",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isPaid",
          "type": "bool"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "allocatedDividendAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isPaid",
              "type": "bool"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IStakedStoneStruct.AllocatedDividend[]",
          "name": "dividends",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "cancelReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "claimDividend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "claimableReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldownPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositDividend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "depositReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "dividendInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recordDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalShare",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IStakedStoneStruct.Dividend",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochStartDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeDividend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stone",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_openDate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readyDividendInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recordDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalShare",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IStakedStoneStruct.Dividend",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestOwnerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetDividendRecordDate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "setCooldownPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setDividendRecordDate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stone",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDividendEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalRewardPerWeek",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "unstakingRequestByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "requestTs",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isClaimed",
              "type": "bool"
            }
          ],
          "internalType": "struct IStakedStoneStruct.UnstakingRequest",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "unstakingRequestCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unstakingRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requestTs",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isClaimed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "userDividendSnapshot",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isPaid",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "share",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakedStoneStruct.DividendSnapshot",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x95eed827d3e8aebeb5b3732483fe13c233e703fb8c2cfeb13d9ac88a3b33afc4",
  "receipt": {
    "to": null,
    "from": "0x23004B8aD485cEf5C15f8D2868049aB4b2788B0b",
    "contractAddress": "0xBfA59A3824441834EA3c2d5B286e4dA3446A66A1",
    "transactionIndex": 10,
    "gasUsed": "6135531",
    "logsBloom": "0x
    "blockHash": "0x752030ac6fa49358cb381d268669cb7451785a2c62fe002ee68ec3d4c6c2fb3b",
    "transactionHash": "0x95eed827d3e8aebeb5b3732483fe13c233e703fb8c2cfeb13d9ac88a3b33afc4",
    "logs": [],
    "blockNumber": 109699581,
    "cumulativeGasUsed": "12959896",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "3d0e2b89dd5fbf9dca6ba313c1373265",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"weekStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CancelReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dividendId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"weekStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dividendId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"ExecuteDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dividendId\",\"type\":\"uint256\"}],\"name\":\"ResetDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dividendId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recordDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShare\",\"type\":\"uint256\"}],\"name\":\"SetDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curr\",\"type\":\"uint256\"}],\"name\":\"UpdateCoolDown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accumulativeUserReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"allocatedDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPaid\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"allocatedDividendAll\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isPaid\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IStakedStoneStruct.AllocatedDividend[]\",\"name\":\"dividends\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"cancelReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"claimableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"depositReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"dividendInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recordDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShare\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IStakedStoneStruct.Dividend\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stone\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_openDate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readyDividendInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recordDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShare\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IStakedStoneStruct.Dividend\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetDividendRecordDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setCooldownPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDividendRecordDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividendEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalRewardPerWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unstakingRequestByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestTs\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct IStakedStoneStruct.UnstakingRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unstakingRequestCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unstakingRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestTs\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"userDividendSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isPaid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakedStoneStruct.DividendSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositReward(uint256,uint256)\":{\"params\":{\"amount\":\"amount to deposit\",\"startTime\":\"The start time of distribution. should always satisfy UTC 00:00. (startTime % 604,800 == 0)\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accumulativeUserReward(address)\":{\"notice\":\"\\uc720\\uc800\\ubcc4 \\uc218\\ub839\\ud55c \\ub204\\uc801 \\ub9ac\\uc6cc\\ub4dc(STONE)\"},\"allocatedDividend(address,uint256)\":{\"notice\":\"\\uc8fc\\uc5b4\\uc9c4 \\ubc30\\ub2f9 \\ud68c\\ucc28\\uc5d0 \\ud560\\ub2f9\\ub41c \\ubc30\\ub2f9\\uae08\\uc561 \\uacc4\\uc0b0\"},\"allocatedDividendAll(address)\":{\"notice\":\"\\uc774 \\ub54c\\uae4c\\uc9c0 \\ubc1b\\uc744 \\uc218 \\uc788\\ub294 \\ubaa8\\ub4e0 \\ubc30\\ub2f9\\uae08 \\uc870\\ud68c\"},\"balanceOf(address)\":{\"notice\":\"calculate the balance staked by owner\"},\"cancelReward(uint256,uint256)\":{\"notice\":\"Retrieve undistributed STONE\"},\"claimDividend(uint256)\":{\"notice\":\"\\ubc30\\ub2f9\\uae08 \\uc218\\ub839\\ud558\\uae30\"},\"claimReward()\":{\"notice\":\"claim allocated STONE reward\"},\"claimableReward(address)\":{\"notice\":\"calculate claimable STONE reward\"},\"depositDividend(address,uint256)\":{\"notice\":\"\\ubc30\\ub2f9\\uae08 \\ub0a9\\uc785\\ud558\\uae30\"},\"depositReward(uint256,uint256)\":{\"notice\":\"deposit the STONE to be distributed linearly for 1 week\"},\"dividendInfo(uint256)\":{\"notice\":\"\\ubc30\\ub2f9\\uae08 \\uc815\\ubcf4\"},\"epochStartDate()\":{\"notice\":\"\\ud604 \\ubc30\\ub2f9 \\uae30\\uc900 \\uc801\\uc6a9 \\uc2dc\\uc791 \\uc2dc\\uac04\"},\"executeDividend()\":{\"notice\":\"\\ubc30\\ub2f9 \\uc9d1\\ud589\\ud558\\uae30\"},\"reStake()\":{\"notice\":\"Re-stake claimable Stone\"},\"readyDividendInfo()\":{\"notice\":\"\\ubc30\\ub2f9 \\uc608\\uc815 \\uc815\\ubcf4\"},\"resetDividendRecordDate()\":{\"notice\":\"\\ubc30\\ub2f9 \\uae30\\uc900\\uc2dc\\uac01 \\ud30c\\uae30\\ud558\\uae30\"},\"setCooldownPeriod(uint256)\":{\"notice\":\"Sets period until un-staking requested amount is able to be withdrawn.\"},\"setDividendRecordDate()\":{\"notice\":\"\\ubc30\\ub2f9 \\uae30\\uc900\\uc2dc\\uac01 \\uc14b\\ud305\\ud558\\uae30\"},\"stake(uint256)\":{\"notice\":\"Stakes Stone for msg.sender\"},\"totalDividendEpoch()\":{\"notice\":\"\\uc9d1\\ud589\\ub41c \\ubc30\\ub2f9 \\ud69f\\uc218\"},\"totalSupply()\":{\"notice\":\"total stone staked\"},\"unstake(uint256)\":{\"notice\":\"request unstaking to msg.sender\"},\"unstakingRequestByIndex(address,uint256)\":{\"notice\":\"Get the information of un-staking requests by owner\"},\"unstakingRequestCounts(address)\":{\"notice\":\"Get the number of un-staking requests by owner\"},\"userDividendSnapshot(address,uint256)\":{\"notice\":\"user's dividend snapshot\"},\"withdraw(uint256)\":{\"notice\":\"withdraw unstaked Stone after cooldown\"}},\"notice\":\"StakedStone Contract created to distribute rewards to STONE holders [\\uc608\\uce58 \\ud504\\ub85c\\uc138\\uc2a4] ============== StakedStone\\uc5d0 \\uc608\\uce58\\ud568\\uc73c\\ub85c\\uc368, STONE \\ud640\\ub354\\ub294 Pangeaswap\\uc5d0\\uc11c \\ubc1c\\uc0dd\\ud558\\ub294 \\uc218\\uc775\\ub4e4\\uc744 \\uacf5\\uc720\\ubc1b\\uc744 \\uc218 \\uc788\\uc2b5\\ub2c8\\ub2e4. \\uc720\\uc800\\uac00 \\uc608\\uce58\\ud55c \\uc790\\uc0b0\\uc744 \\ube7c\\ub824\\uba74 unstake\\uc744 \\ud638\\ucd9c \\ud6c4, cooldown \\uae30\\uac04\\uc774\\ud6c4\\uc5d0 withdraw\\ud560 \\uc218 \\uc788\\uc2b5\\ub2c8\\ub2e4. unstake \\ud638\\ucd9c \\ud6c4\\uc5d0\\ub294 \\uc720\\uc800\\ub294 claim\\ud560 \\uc218 \\uc5c6\\uc2b5\\ub2c8\\ub2e4. 1. Manager Side stake() => unstake() =====> withdraw() ---------- | cooldown | \\uae30\\uac04 \\ud544\\uc694 - setCooldownPeriod(period) : unstake\\uc5d0\\uc11c withdraw\\uae4c\\uc9c0\\uc758 \\uae30\\uac04\\uc744 \\uc9c0\\uc815. default : 7 days \\uc18c\\uc694 1. Holder Side - stake(amount) : amount\\ub9cc\\ud07c\\uc758 STONE\\uc744 \\uc608\\uce58 - unstake(amount) : \\uc608\\uce58\\ub41c STONE\\uc5d0\\uc11c amount \\ub9cc\\ud07c \\uc778\\ucd9c - unstakingRequestCounts(owner) : \\ud604\\uc7ac owner\\uac00 \\uc694\\uccad\\ud55c unstaking request \\uac2f\\uc218 ( withdraw\\ud558\\uba74 \\uc904\\uc5b4\\ub4e6) - unstakingRequestByIndex(owner, index); : \\uc694\\uccad\\ud55c unstaking \\uc815\\ubcf4 \\uc870\\ud68c - withdraw(requestId) : cooldown \\uae30\\uac04\\uc774 \\uc9c0\\ub09c unstaking request \\ud638\\ucd9c\\ud574\\uc11c \\uac00\\uc838\\uc624\\uae30 [\\ubc30\\ub2f9 \\ud504\\ub85c\\uc138\\uc2a4] ============== `\\ubc30\\ub2f9`\\uc740 \\ube44\\uc815\\uae30\\uc801\\uc73c\\ub85c \\ud504\\ub85c\\ud1a0\\ucf5c \\uc218\\uc775\\uc744 Holder\\ub4e4\\uc5d0\\uac8c \\ud658\\uc6d0\\ud558\\ub294 \\ud504\\ub85c\\uc138\\uc2a4\\ub85c, \\uc720\\uc800\\uc758 \\uc608\\uce58\\ub7c9\\uacfc \\uc608\\uce58 \\uae30\\uac04\\uc5d0 \\ube44\\ub840\\ud558\\uc5ec \\ud504\\ub85c\\ud1a0\\ucf5c \\uc218\\uc775\\uc744 \\ub098\\ub204\\uc5b4 \\uc900\\ub2e4. 1. Manager Side \\ubc30\\ub2f9\\uae08 \\uc9d1\\ud589\\uc77c \\ud655\\uc815         \\ubc30\\ub2f9\\uae08 \\ub0a9\\uc785                      \\ubc30\\ub2f9\\uae08 \\uc9d1\\ud589 setDividendRecordDate() => depositDividend(token,amount) => executeDividend(); <= resetDividendRecordDate() : \\uc9d1\\ud589\\uc804 \\ubc30\\ub2f9\\uae08 \\ucde8\\uc18c; - \\uc9d1\\ud589\\uc2dc\\uac01 \\uae30\\uc900\\uc73c\\ub85c account \\ubcc4 \\uc9c0\\ubd84\\uc728\\uc744 \\uc0b0\\ucd9c\\ud55c\\ub2e4. - \\ubc30\\ub2f9\\uae08\\uc774 \\ub0a9\\uc785\\ub418\\uc5b4\\uc57c, \\uc9d1\\ud589\\uc774 \\uc9c4\\ud589\\ub41c\\ub2e4. - \\ub0a9\\uc785\\ub41c \\ubc30\\ub2f9\\uae08\\uc740 \\uc804\\uc561 \\ud574\\ub2f9 \\ubc30\\ub2f9\\uae08 \\ubd84\\ubc30\\uc5d0 \\uc0ac\\uc6a9\\ub41c\\ub2e4. - \\uc9d1\\ud589 \\uc804\\uae4c\\uc9c0 \\uc5b8\\uc81c\\ub4e0 resetDividendRecordDate\\uc744 \\ud638\\ucd9c\\ud560 \\uc218 \\uc788\\uc73c\\uba70, \\ub0a9\\uc785\\ub41c \\ubc30\\ub2f9\\uae08\\uc740 \\ud68c\\uc218\\ucc98\\ub9ac\\ub41c\\ub2e4. (msg.sender\\ub85c) 2. Holder Side - allocatedDividend(epoch) : \\ud574\\ub2f9 epoch\\uc5d0\\uc11c \\ubc1b\\uc744 \\uc218 \\uc788\\ub294 \\ubc30\\ub2f9\\uae08 \\ud1a0\\ud070 \\uc870\\ud68c - claimDividend(epoch) : \\ud574\\ub2f9 epoch\\uc5d0 \\ubc30\\uce58\\ub41c \\ubc30\\ub2f9\\uae08\\uc744 \\uc218\\ub839 [\\ub9ac\\uc6cc\\ub4dc \\ud504\\ub85c\\uc138\\uc2a4] ================ `\\ub9ac\\uc6cc\\ub4dc`\\ub294 \\ub9e4\\uc8fc \\ubc30\\uce58\\ub418\\uc5b4 \\uc788\\ub294 \\uac70\\ubc84\\ub10c\\uc2a4 \\ud1a0\\ud070\\uc744 \\uc608\\uce58\\ud55c \\ud640\\ub354\\uc5d0\\uac8c \\uc81c\\uacf5\\ud558\\ub294 \\ud504\\ub85c\\uc138\\uc2a4\\ub85c, \\ub9e4 \\ube14\\ub7ed\\ub9c8\\ub2e4 \\uc120\\ud615\\uc801\\uc73c\\ub85c \\ubd84\\ubc30\\ub41c\\ub2e4. 1. Manager Side - depositReward(amount, startTime) : \\ub9ac\\uc6cc\\ub4dc \\ub0a9\\uc785 (startTime\\uc5d0\\uc11c \\ubd80\\ud130 1\\uc8fc\\uc77c\\uac04 \\ubd84\\ubc30) - cancelReward(amount, startTime) : \\ubd84\\ubc30\\ub418\\uc9c0 \\uc54a\\uc740 \\uc8fc\\ucc28\\uc758 \\ub9ac\\uc6cc\\ub4dc \\ud68c\\uc218 2. Holder Side - claimableReward(owner) : \\ud604\\uc7ac \\ubc1b\\uc744 \\uc218 \\uc788\\ub294 \\ub9ac\\uc6cc\\ub4dc \\ub7c9 \\uc870\\ud68c - claimReward() : \\ub9ac\\uc6cc\\ub4dc \\uc218\\ub839\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakedStone.sol\":\"StakedStone\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x35e30a35e23f856cbcee3558b7efdd83f6017a8f1b419710645143d98e892463\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"contracts/StakedStone.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"./interfaces/IStakedStone.sol\\\";\\nimport \\\"./libraries/FullMath.sol\\\";\\nimport \\\"./libraries/FixedPoint.sol\\\";\\n\\n/**\\n * StakedStone Contract created to distribute rewards to STONE holders\\n\\n [\\uc608\\uce58 \\ud504\\ub85c\\uc138\\uc2a4]\\n ==============\\n\\n StakedStone\\uc5d0 \\uc608\\uce58\\ud568\\uc73c\\ub85c\\uc368, STONE \\ud640\\ub354\\ub294 Pangeaswap\\uc5d0\\uc11c \\ubc1c\\uc0dd\\ud558\\ub294 \\uc218\\uc775\\ub4e4\\uc744 \\uacf5\\uc720\\ubc1b\\uc744 \\uc218 \\uc788\\uc2b5\\ub2c8\\ub2e4.\\n \\uc720\\uc800\\uac00 \\uc608\\uce58\\ud55c \\uc790\\uc0b0\\uc744 \\ube7c\\ub824\\uba74 unstake\\uc744 \\ud638\\ucd9c \\ud6c4, cooldown \\uae30\\uac04\\uc774\\ud6c4\\uc5d0 withdraw\\ud560 \\uc218 \\uc788\\uc2b5\\ub2c8\\ub2e4.\\n unstake \\ud638\\ucd9c \\ud6c4\\uc5d0\\ub294 \\uc720\\uc800\\ub294 claim\\ud560 \\uc218 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.\\n\\n 1. Manager Side\\n     stake() => unstake() =====> withdraw()\\n                        ----------\\n                       | cooldown | \\uae30\\uac04 \\ud544\\uc694\\n\\n\\n   - setCooldownPeriod(period)\\n     : unstake\\uc5d0\\uc11c withdraw\\uae4c\\uc9c0\\uc758 \\uae30\\uac04\\uc744 \\uc9c0\\uc815. default : 7 days \\uc18c\\uc694\\n\\n 1. Holder Side\\n\\n   - stake(amount)\\n     : amount\\ub9cc\\ud07c\\uc758 STONE\\uc744 \\uc608\\uce58\\n\\n   - unstake(amount)\\n     : \\uc608\\uce58\\ub41c STONE\\uc5d0\\uc11c amount \\ub9cc\\ud07c \\uc778\\ucd9c\\n\\n   - unstakingRequestCounts(owner)\\n     : \\ud604\\uc7ac owner\\uac00 \\uc694\\uccad\\ud55c unstaking request \\uac2f\\uc218 ( withdraw\\ud558\\uba74 \\uc904\\uc5b4\\ub4e6)\\n\\n   - unstakingRequestByIndex(owner, index);\\n     : \\uc694\\uccad\\ud55c unstaking \\uc815\\ubcf4 \\uc870\\ud68c\\n\\n   - withdraw(requestId)\\n     : cooldown \\uae30\\uac04\\uc774 \\uc9c0\\ub09c unstaking request \\ud638\\ucd9c\\ud574\\uc11c \\uac00\\uc838\\uc624\\uae30\\n\\n\\n [\\ubc30\\ub2f9 \\ud504\\ub85c\\uc138\\uc2a4]\\n ==============\\n\\n `\\ubc30\\ub2f9`\\uc740 \\ube44\\uc815\\uae30\\uc801\\uc73c\\ub85c \\ud504\\ub85c\\ud1a0\\ucf5c \\uc218\\uc775\\uc744 Holder\\ub4e4\\uc5d0\\uac8c \\ud658\\uc6d0\\ud558\\ub294 \\ud504\\ub85c\\uc138\\uc2a4\\ub85c,\\n \\uc720\\uc800\\uc758 \\uc608\\uce58\\ub7c9\\uacfc \\uc608\\uce58 \\uae30\\uac04\\uc5d0 \\ube44\\ub840\\ud558\\uc5ec \\ud504\\ub85c\\ud1a0\\ucf5c \\uc218\\uc775\\uc744 \\ub098\\ub204\\uc5b4 \\uc900\\ub2e4.\\n\\n   1. Manager Side\\n\\n      \\ubc30\\ub2f9\\uae08 \\uc9d1\\ud589\\uc77c \\ud655\\uc815         \\ubc30\\ub2f9\\uae08 \\ub0a9\\uc785                      \\ubc30\\ub2f9\\uae08 \\uc9d1\\ud589\\n      setDividendRecordDate() => depositDividend(token,amount) => executeDividend();\\n\\n                              <= resetDividendRecordDate() : \\uc9d1\\ud589\\uc804 \\ubc30\\ub2f9\\uae08 \\ucde8\\uc18c;\\n\\n        - \\uc9d1\\ud589\\uc2dc\\uac01 \\uae30\\uc900\\uc73c\\ub85c account \\ubcc4 \\uc9c0\\ubd84\\uc728\\uc744 \\uc0b0\\ucd9c\\ud55c\\ub2e4.\\n        - \\ubc30\\ub2f9\\uae08\\uc774 \\ub0a9\\uc785\\ub418\\uc5b4\\uc57c, \\uc9d1\\ud589\\uc774 \\uc9c4\\ud589\\ub41c\\ub2e4.\\n        - \\ub0a9\\uc785\\ub41c \\ubc30\\ub2f9\\uae08\\uc740 \\uc804\\uc561 \\ud574\\ub2f9 \\ubc30\\ub2f9\\uae08 \\ubd84\\ubc30\\uc5d0 \\uc0ac\\uc6a9\\ub41c\\ub2e4.\\n        - \\uc9d1\\ud589 \\uc804\\uae4c\\uc9c0 \\uc5b8\\uc81c\\ub4e0 resetDividendRecordDate\\uc744 \\ud638\\ucd9c\\ud560 \\uc218 \\uc788\\uc73c\\uba70, \\ub0a9\\uc785\\ub41c \\ubc30\\ub2f9\\uae08\\uc740 \\ud68c\\uc218\\ucc98\\ub9ac\\ub41c\\ub2e4. (msg.sender\\ub85c)\\n\\n   2. Holder Side\\n\\n      - allocatedDividend(epoch)\\n        : \\ud574\\ub2f9 epoch\\uc5d0\\uc11c \\ubc1b\\uc744 \\uc218 \\uc788\\ub294 \\ubc30\\ub2f9\\uae08 \\ud1a0\\ud070 \\uc870\\ud68c\\n\\n      - claimDividend(epoch)\\n        : \\ud574\\ub2f9 epoch\\uc5d0 \\ubc30\\uce58\\ub41c \\ubc30\\ub2f9\\uae08\\uc744 \\uc218\\ub839\\n\\n [\\ub9ac\\uc6cc\\ub4dc \\ud504\\ub85c\\uc138\\uc2a4]\\n ================\\n\\n `\\ub9ac\\uc6cc\\ub4dc`\\ub294 \\ub9e4\\uc8fc \\ubc30\\uce58\\ub418\\uc5b4 \\uc788\\ub294 \\uac70\\ubc84\\ub10c\\uc2a4 \\ud1a0\\ud070\\uc744 \\uc608\\uce58\\ud55c \\ud640\\ub354\\uc5d0\\uac8c \\uc81c\\uacf5\\ud558\\ub294 \\ud504\\ub85c\\uc138\\uc2a4\\ub85c,\\n \\ub9e4 \\ube14\\ub7ed\\ub9c8\\ub2e4 \\uc120\\ud615\\uc801\\uc73c\\ub85c \\ubd84\\ubc30\\ub41c\\ub2e4.\\n\\n    1. Manager Side\\n\\n       - depositReward(amount, startTime)\\n         : \\ub9ac\\uc6cc\\ub4dc \\ub0a9\\uc785 (startTime\\uc5d0\\uc11c \\ubd80\\ud130 1\\uc8fc\\uc77c\\uac04 \\ubd84\\ubc30)\\n\\n       - cancelReward(amount, startTime)\\n         : \\ubd84\\ubc30\\ub418\\uc9c0 \\uc54a\\uc740 \\uc8fc\\ucc28\\uc758 \\ub9ac\\uc6cc\\ub4dc \\ud68c\\uc218\\n\\n    2. Holder Side\\n\\n      - claimableReward(owner)\\n        : \\ud604\\uc7ac \\ubc1b\\uc744 \\uc218 \\uc788\\ub294 \\ub9ac\\uc6cc\\ub4dc \\ub7c9 \\uc870\\ud68c\\n\\n      - claimReward()\\n        : \\ub9ac\\uc6cc\\ub4dc \\uc218\\ub839\\n\\n */\\ncontract StakedStone is\\n    Multicall,\\n    AccessControlUpgradeable,\\n    IStakedStone {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant MANAGER_ROLE = keccak256(abi.encode(\\\"MANAGER\\\"));\\n\\n    // @dev \\uc8fc\\ucc28 \\ubcc4 \\ubc30\\uce58\\ub41c \\ub9ac\\uc6cc\\ub4dc \\ucd1d\\uc561, (timestamp % 7 days) == 0\\uc758 \\uac12\\uc73c\\ub85c \\uc785\\ub825\\ud574\\uc57c \\ud568.\\n    mapping(uint256 => uint256) public totalRewardPerWeek;\\n\\n    uint256 private checkpoint;\\n\\n    uint256 private rewardGrowthGlobalLast;\\n    uint256 private pendingReward;\\n\\n    uint256 public totalShare;\\n\\n    mapping(address => uint256) private _balanceOf;\\n    uint256 private _totalSupply;\\n\\n    // @dev unstake \\ud6c4 withdraw \\uac00\\ub2a5\\ud560 \\ub54c\\uae4c\\uc9c0 \\uae30\\uac04 (\\ucd08)\\n    uint256 public cooldownPeriod;\\n\\n    address public stone;\\n\\n    // @dev Staked Stone \\uc2dc\\uc791 \\uc2dc\\uac04\\n    uint256 private openDate;\\n\\n    // @dev \\ubc30\\ub2f9 \\uc608\\uc815 \\uc815\\ubcf4 (\\ubbf8\\ubc30\\ub2f9 \\uc0c1\\ud0dc)\\n    Dividend private readyDividend;\\n\\n    // @dev \\uacfc\\uac70 \\ubc30\\ub2f9 \\uc815\\ubcf4 (\\ubc30\\ub2f9\\ub41c \\uc0c1\\ud0dc)\\n    Dividend[] private _dividendHistory;\\n\\n    mapping(address => uint256) private _userLastRecordDate;\\n    mapping(address => mapping(uint256 => DividendSnapshot)) private _userDividendSnapshot;\\n\\n    UnstakingRequest[] public unstakingRequests;\\n    mapping(uint256 => address) public requestOwnerOf;\\n    /**\\n     * @notice Get the number of un-staking requests by owner\\n     */\\n    mapping(address => uint256) public unstakingRequestCounts;\\n    mapping(address => mapping(uint256 => uint256)) private _ownedRequests;\\n    mapping(uint256 => uint256) private _ownedRequestsIndex;\\n\\n    // @dev \\uc720\\uc800\\uc758 \\ub9ac\\uc6cc\\ub4dc \\uc2a4\\ub0c5\\uc0f7 \\uc815\\ubcf4, \\uc774\\ub97c \\ud1b5\\ud574 \\ubc1b\\uc744 \\uc218 \\uc788\\ub294 \\ub9ac\\uc6cc\\ub4dc\\ub97c \\uc5ed\\uc0b0\\n    mapping(address => RewardSnapshot) private _userRewardSnapshot;\\n\\n    /**\\n     * @notice \\uc720\\uc800\\ubcc4 \\uc218\\ub839\\ud55c \\ub204\\uc801 \\ub9ac\\uc6cc\\ub4dc(STONE)\\n     */\\n    mapping(address => uint256) public accumulativeUserReward;\\n\\n    receive() external payable {\\n    }\\n\\n    function initialize(\\n        address _stone,\\n        uint256 _openDate\\n    ) external initializer {\\n        stone = _stone;\\n        cooldownPeriod = 7 days;\\n\\n        openDate = _openDate;\\n        checkpoint = _openDate;\\n\\n        __AccessControl_init();\\n        _setupRole(AccessControlUpgradeable.DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    modifier updateUserSnapshot(address owner) {\\n        require(readyDividend.recordDate == 0, \\\"ON DIVIDEND\\\");\\n\\n        uint256 growthGlobal = _updateGrowthGlobal();\\n        _updateRewardSnapshot(owner, growthGlobal);\\n        _updateDividendSnapshot(owner);\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice deposit the STONE to be distributed linearly for 1 week\\n     * @param amount amount to deposit\\n     * @param startTime The start time of distribution. should always satisfy UTC 00:00. (startTime % 604,800 == 0)\\n     */\\n    function depositReward(uint256 amount, uint256 startTime) external onlyRole(MANAGER_ROLE) {\\n        require(startTime % 7 days == 0, \\\"startTime % 7 days != 0\\\");\\n        require(startTime >= block.timestamp, \\\"TOO LATE\\\");\\n\\n        IERC20(stone).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        totalRewardPerWeek[startTime] += amount;\\n\\n        emit DepositReward(msg.sender, startTime, amount);\\n    }\\n\\n    /**\\n     * @notice Retrieve undistributed STONE\\n     */\\n    function cancelReward(uint256 amount, uint256 startTime) external onlyRole(MANAGER_ROLE) {\\n        require(startTime >= block.timestamp, \\\"TOO LATE\\\");\\n\\n        totalRewardPerWeek[startTime] -= amount;\\n\\n        IERC20(stone).transfer(msg.sender, amount);\\n\\n        emit CancelReward(msg.sender, startTime, amount);\\n    }\\n\\n    /**\\n     * @notice \\ubc30\\ub2f9 \\uae30\\uc900\\uc2dc\\uac01 \\uc14b\\ud305\\ud558\\uae30\\n     */\\n    function setDividendRecordDate() external onlyRole(MANAGER_ROLE) {\\n        require(block.timestamp >= openDate, \\\"NOT START\\\");\\n        _updateGrowthGlobal();\\n\\n        require(readyDividend.recordDate == 0, \\\"ALREADY SET\\\");\\n        require(totalShare > 0, \\\"TOTAL SHARE NOT ZERO\\\");\\n\\n        readyDividend.startDate = epochStartDate();\\n        readyDividend.recordDate = block.timestamp;\\n        readyDividend.totalShare = totalShare;\\n\\n        emit SetDividend(\\n            _dividendHistory.length,\\n            readyDividend.startDate,\\n            readyDividend.recordDate,\\n            readyDividend.totalShare\\n        );\\n    }\\n\\n    /**\\n     * @notice \\ubc30\\ub2f9 \\uae30\\uc900\\uc2dc\\uac01 \\ud30c\\uae30\\ud558\\uae30\\n     */\\n    function resetDividendRecordDate() external onlyRole(MANAGER_ROLE) {\\n        require(readyDividend.recordDate != 0, \\\"NOT SET\\\");\\n\\n        for (uint256 i = 0; i < readyDividend.tokens.length; i++) {\\n            address token = readyDividend.tokens[i];\\n            uint256 amount = readyDividend.amounts[i];\\n            // @dev get the deposited dividend back\\n            IERC20(token).safeTransfer(msg.sender, amount);\\n        }\\n\\n        delete readyDividend;\\n\\n        emit ResetDividend(_dividendHistory.length);\\n    }\\n\\n    /**\\n     * @notice \\ubc30\\ub2f9\\uae08 \\ub0a9\\uc785\\ud558\\uae30\\n     */\\n    function depositDividend(\\n        address token,\\n        uint256 amount\\n    ) external onlyRole(MANAGER_ROLE) {\\n        require(readyDividend.recordDate != 0, \\\"NOT SET\\\");\\n        require(amount > 0, \\\"NOT ZERO\\\");\\n\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // @dev \\ubc30\\ub2f9 \\ud1a0\\ud070 \\uc218\\ub294 1~2\\uac1c\\ub85c \\uc774\\ub8e8\\uc5b4\\uc9d0. \\uc21c\\ud68c \\uad6c\\ubb38\\uc73c\\ub85c\\ub3c4 gas efficient\\ud568\\n        for (uint256 i = 0; i < readyDividend.tokens.length; i++) {\\n            address _token = readyDividend.tokens[i];\\n            if (_token != token) continue;\\n\\n            // @dev \\uc774\\ubbf8 \\ub0a9\\uc785\\ub41c \\ud1a0\\ud070\\uc774\\ub77c\\uba74, \\ucd94\\uac00\\ud558\\uc9c0 \\uc54a\\uace0, readyDividend\\uc5d0 \\ucd94\\uac00\\ud55c\\ub2e4\\n            readyDividend.amounts[i] += amount;\\n            emit DepositDividend(_dividendHistory.length, token, amount);\\n            return;\\n        }\\n\\n        // @dev \\uc774\\ubbf8 \\ub0a9\\uc785\\ub418\\uc9c0 \\uc54a\\uc740 \\ud1a0\\ud070\\uc740 \\ucd94\\uac00\\ud55c\\ub2e4\\n        readyDividend.tokens.push(token);\\n        readyDividend.amounts.push(amount);\\n\\n        emit DepositDividend(_dividendHistory.length, token, amount);\\n    }\\n\\n    /**\\n     * @notice \\ubc30\\ub2f9 \\uc9d1\\ud589\\ud558\\uae30\\n     */\\n    function executeDividend() external onlyRole(MANAGER_ROLE) {\\n        require(readyDividend.recordDate != 0, \\\"NOT SET\\\");\\n        require(readyDividend.tokens.length > 0, \\\"NO DEPOSIT\\\");\\n        _updateGrowthGlobal();\\n\\n        _dividendHistory.push(\\n            Dividend(\\n                readyDividend.startDate,\\n                readyDividend.recordDate,\\n                readyDividend.totalShare,\\n                readyDividend.tokens,\\n                readyDividend.amounts\\n            )\\n        );\\n\\n        totalShare -= readyDividend.totalShare;\\n        delete readyDividend;\\n\\n        emit ExecuteDividend(\\n            _dividendHistory.length - 1,\\n            readyDividend.tokens,\\n            readyDividend.amounts\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets period until un-staking requested amount is able to be withdrawn.\\n     */\\n    function setCooldownPeriod(uint256 period) external onlyRole(MANAGER_ROLE) {\\n        uint256 prev = cooldownPeriod;\\n        cooldownPeriod = period;\\n\\n        emit UpdateCoolDown(prev, period);\\n    }\\n\\n    /**\\n     * @notice calculate the balance staked by owner\\n     */\\n    function balanceOf(address owner) external view returns (uint256 amount) {\\n        return _balanceOf[owner];\\n    }\\n\\n    /**\\n     * @notice total stone staked\\n     */\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @notice user's dividend snapshot\\n     */\\n    function userDividendSnapshot(address owner, uint256 index) external view returns (DividendSnapshot memory) {\\n        return _userDividendSnapshot[owner][index];\\n    }\\n\\n    /**\\n     * @notice Get the information of un-staking requests by owner\\n     */\\n    function unstakingRequestByIndex(address owner, uint256 index) external view returns (UnstakingRequest memory) {\\n        uint256 requestId = _ownedRequests[owner][index];\\n        return unstakingRequests[requestId];\\n    }\\n\\n    /**\\n     * @notice \\ud604 \\ubc30\\ub2f9 \\uae30\\uc900 \\uc801\\uc6a9 \\uc2dc\\uc791 \\uc2dc\\uac04\\n     */\\n    function epochStartDate() public view returns (uint256) {\\n        return _dividendHistory.length > 0 ? _dividendHistory[_dividendHistory.length-1].recordDate : openDate;\\n    }\\n\\n    /**\\n     * @notice \\uc9d1\\ud589\\ub41c \\ubc30\\ub2f9 \\ud69f\\uc218\\n     */\\n    function totalDividendEpoch() external view returns (uint256) {\\n        return _dividendHistory.length;\\n    }\\n\\n    /**\\n     * @notice \\ubc30\\ub2f9 \\uc608\\uc815 \\uc815\\ubcf4\\n     */\\n    function readyDividendInfo() external view returns (Dividend memory) {\\n        return readyDividend;\\n    }\\n\\n    /**\\n     * @notice \\ubc30\\ub2f9\\uae08 \\uc815\\ubcf4\\n     */\\n    function dividendInfo(uint256 epoch) external view returns (Dividend memory) {\\n        return _dividendHistory[epoch];\\n    }\\n\\n    /**\\n     * @notice Stakes Stone for msg.sender\\n     */\\n    function stake(uint256 amount) external updateUserSnapshot(msg.sender) {\\n        require(block.timestamp >= openDate, \\\"NOT START\\\");\\n        IERC20(stone).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        _stake(msg.sender, amount);\\n    }\\n\\n    function _stake(address owner, uint256 amount) internal {\\n        _balanceOf[owner] += amount;\\n        _totalSupply += amount;\\n\\n        emit Stake(owner, amount);\\n    }\\n\\n    /**\\n     * @notice request unstaking to msg.sender\\n     */\\n    function unstake(uint256 amount) external updateUserSnapshot(msg.sender) {\\n        _balanceOf[msg.sender] -= amount;\\n        _totalSupply -= amount;\\n\\n        uint256 requestId = unstakingRequests.length;\\n        unstakingRequests.push(UnstakingRequest(requestId, amount, block.timestamp, false));\\n\\n        uint256 count = unstakingRequestCounts[msg.sender]++;\\n\\n        requestOwnerOf[requestId] = msg.sender;\\n        _ownedRequests[msg.sender][count] = requestId;\\n        _ownedRequestsIndex[requestId] = count;\\n\\n        emit Unstake(msg.sender, amount, requestId);\\n    }\\n\\n    /**\\n     * @notice withdraw unstaked Stone after cooldown\\n     */\\n    function withdraw(uint256 requestId) external returns (uint256 amount) {\\n        UnstakingRequest memory request = unstakingRequests[requestId];\\n        require(!request.isClaimed, \\\"ALREADY CLAIMED\\\");\\n        require(requestOwnerOf[requestId] == msg.sender, \\\"NOT OWNER\\\");\\n        require(request.requestTs + cooldownPeriod <= block.timestamp, \\\"NEED COOLDOWN\\\");\\n        amount = request.amount;\\n\\n        closeRequest(msg.sender, requestId);\\n\\n        IERC20(stone).safeTransfer(msg.sender, amount);\\n\\n        emit Withdraw(msg.sender, amount);\\n    }\\n\\n    function closeRequest(address owner, uint256 requestId) internal {\\n        unstakingRequests[requestId].isClaimed = true;\\n\\n        // @dev ownedRequests\\uc5d0\\uc11c requestId \\uc81c\\uac70\\n        uint256 lastRequestIndex = --unstakingRequestCounts[owner];\\n        uint256 requestIndex = _ownedRequestsIndex[requestId];\\n\\n        if (requestIndex != lastRequestIndex) {\\n            uint256 lastRequestId = _ownedRequests[owner][lastRequestIndex];\\n\\n            _ownedRequests[owner][requestIndex] = lastRequestId;\\n            _ownedRequestsIndex[lastRequestId] = requestIndex;\\n        }\\n\\n        delete _ownedRequestsIndex[requestId];\\n        delete _ownedRequests[owner][lastRequestIndex];\\n    }\\n\\n    /**\\n     * @notice Re-stake claimable Stone\\n     */\\n    function reStake() external updateUserSnapshot(msg.sender) {\\n        uint256 amount = _claimReward(msg.sender);\\n        _stake(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice claim allocated STONE reward\\n     */\\n    function claimReward() external updateUserSnapshot(msg.sender) returns (uint256 amount) {\\n        amount = _claimReward(msg.sender);\\n        IERC20(stone).safeTransfer(msg.sender, amount);\\n    }\\n\\n    function _claimReward(address owner) internal returns (uint256 amount){\\n        amount = _userRewardSnapshot[owner]._owed;\\n        _userRewardSnapshot[owner]._owed = 0;\\n        accumulativeUserReward[msg.sender] += amount;\\n\\n        emit Claim(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice calculate claimable STONE reward\\n     */\\n    function claimableReward(address owner) external view returns (uint256) {\\n        uint256 amount = _calculateRewardToDistribute() + pendingReward;\\n        RewardSnapshot memory snapshot = _userRewardSnapshot[owner];\\n\\n        return FullMath.mulDiv(\\n            _rewardGrowthGlobal(amount) - snapshot._growthGlobalLast, _balanceOf[owner], FixedPoint.Q96\\n        ) + snapshot._owed;\\n    }\\n\\n    /**\\n     * @notice \\ubc30\\ub2f9\\uae08 \\uc218\\ub839\\ud558\\uae30\\n     */\\n    function claimDividend(uint256 epoch) external updateUserSnapshot(msg.sender) {\\n        DividendSnapshot memory snapshot = _userDividendSnapshot[msg.sender][epoch];\\n        require(!snapshot.isPaid, \\\"ALREADY PAID\\\");\\n        require(snapshot.share > 0, \\\"NO SHARE\\\");\\n\\n        Dividend memory epochDividend = _dividendHistory[epoch];\\n        uint256 epochTotalShare = epochDividend.totalShare;\\n        _userDividendSnapshot[msg.sender][epoch].isPaid = true;\\n\\n        for (uint256 i = 0; i < epochDividend.tokens.length; i++) {\\n            address token = epochDividend.tokens[i];\\n            uint256 amount = epochDividend.amounts[i];\\n\\n            uint256 userAmount = FullMath.mulDiv(\\n                amount, snapshot.share, epochTotalShare\\n            );\\n\\n            IERC20(token).safeTransfer(msg.sender, userAmount);\\n\\n            emit ClaimDividend(msg.sender, epoch, token, userAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice \\uc8fc\\uc5b4\\uc9c4 \\ubc30\\ub2f9 \\ud68c\\ucc28\\uc5d0 \\ud560\\ub2f9\\ub41c \\ubc30\\ub2f9\\uae08\\uc561 \\uacc4\\uc0b0\\n     */\\n    function allocatedDividend(address owner, uint256 epoch) public view returns (\\n        bool isPaid,\\n        address[] memory tokens,\\n        uint256[] memory amounts\\n    ) {\\n        Dividend memory epochDividend = _dividendHistory[epoch];\\n\\n        tokens = epochDividend.tokens;\\n        amounts = new uint256[](epochDividend.tokens.length);\\n\\n        isPaid = _userDividendSnapshot[owner][epoch].isPaid;\\n\\n        uint256 share = _calculateUserShare(owner, epoch, epochDividend);\\n        if (share == 0) return (isPaid, tokens, amounts);\\n\\n        uint256 epochTotalShare = epochDividend.totalShare;\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            amounts[i] = FullMath.mulDiv(\\n                epochDividend.amounts[i],\\n                share,\\n                epochTotalShare\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice \\uc774 \\ub54c\\uae4c\\uc9c0 \\ubc1b\\uc744 \\uc218 \\uc788\\ub294 \\ubaa8\\ub4e0 \\ubc30\\ub2f9\\uae08 \\uc870\\ud68c\\n     */\\n    function allocatedDividendAll(address owner) external view returns (AllocatedDividend[] memory dividends) {\\n        uint256 total = _dividendHistory.length;\\n        dividends = new AllocatedDividend[](total);\\n\\n        for (uint256 i=0;i<total;i++) {\\n            (bool isPaid,address[] memory tokens,uint256[] memory amounts) = allocatedDividend(owner, i);\\n            dividends[i] = AllocatedDividend(isPaid, tokens, amounts);\\n        }\\n    }\\n\\n    function _updateGrowthGlobal() internal returns (uint256 growthGlobal) {\\n        uint256 _checkpoint = checkpoint;\\n        uint256 amount = _calculateRewardToDistribute();\\n\\n        amount = _updatePendingReward(amount);\\n        growthGlobal = _rewardGrowthGlobal(amount);\\n        rewardGrowthGlobalLast = growthGlobal;\\n\\n        // @dev Skip if the block has been updated in advance. (gas efficient policy)\\n        if (_checkpoint >= block.timestamp) return growthGlobal;\\n\\n        totalShare += (block.timestamp - _checkpoint) * _totalSupply;\\n        checkpoint = block.timestamp;\\n    }\\n\\n    function _calculateUserShare(\\n        address owner,\\n        uint256 epoch,\\n        Dividend memory epochDividend\\n    ) private view returns (uint256 share) {\\n        share = _userDividendSnapshot[owner][epoch].share;\\n\\n        // if there is no balance, skip\\n        uint256 balance = _balanceOf[owner];\\n        if (balance == 0) return share;\\n\\n        // calculate previous user share\\n        uint256 startDate = Math.max(_userLastRecordDate[owner], epochDividend.startDate);\\n        if (epochDividend.recordDate <= startDate) return share;\\n\\n        return share + (epochDividend.recordDate - startDate) * balance;\\n    }\\n\\n    function _updatePendingReward(uint256 amount) internal returns (uint256) {\\n        if (_totalSupply == 0) {\\n            // @dev Rewards accumulated while there is no staked supply\\n            // are distributed later\\n            pendingReward += amount;\\n            return 0;\\n        }\\n\\n        if (pendingReward > 0) {\\n            // @dev add pendingReward if it remains\\n            amount += pendingReward;\\n            pendingReward = 0;\\n        }\\n\\n        return amount;\\n    }\\n\\n    function _updateDividendSnapshot(address owner) internal {\\n        _updateUserShare(owner);\\n        _userLastRecordDate[owner] = block.timestamp;\\n    }\\n\\n    function _updateUserShare(address owner) internal {\\n        uint256 balance = _balanceOf[owner];\\n\\n        // @dev skip to update user share\\n        if (balance == 0) return;\\n\\n        uint256 lastRecordDate = _userLastRecordDate[owner];\\n\\n        // @dev there is no previous dividend\\n        if (_dividendHistory.length == 0) {\\n            _userDividendSnapshot[owner][0].share += (block.timestamp - lastRecordDate) * balance;\\n            return;\\n        }\\n\\n        uint256 index = _dividendHistory.length - 1;\\n        Dividend memory dividend = _dividendHistory[index];\\n\\n        uint256 period = block.timestamp - Math.max(dividend.recordDate, lastRecordDate);\\n        _userDividendSnapshot[owner][index+1].share += period * balance;\\n\\n        while (dividend.recordDate > lastRecordDate) {\\n            period = dividend.recordDate - Math.max(dividend.startDate, lastRecordDate);\\n            _userDividendSnapshot[owner][index].share += period * balance;\\n\\n            if (index == 0) break;\\n\\n            dividend = _dividendHistory[--index];\\n        }\\n    }\\n\\n    function _updateRewardSnapshot(address owner, uint256 growthGlobal) internal {\\n        RewardSnapshot storage snapshot = _userRewardSnapshot[owner];\\n        snapshot._owed += FullMath.mulDiv(\\n            growthGlobal - snapshot._growthGlobalLast, _balanceOf[owner], FixedPoint.Q96\\n        );\\n        snapshot._growthGlobalLast = growthGlobal;\\n    }\\n\\n    function _rewardGrowthGlobal(uint256 amount) private view returns (uint256 growthGlobal) {\\n        growthGlobal = rewardGrowthGlobalLast;\\n\\n        if (amount > 0 && _totalSupply > 0) {\\n            growthGlobal += FullMath.mulDiv(amount, FixedPoint.Q96, _totalSupply);\\n        }\\n    }\\n\\n    function _calculateRewardToDistribute() private view returns (uint256 amount) {\\n        uint256 _checkpoint = checkpoint;\\n        if (block.timestamp < _checkpoint) return 0;\\n\\n        uint256 currentEpoch = (block.timestamp / 7 days) * 7 days;\\n\\n        // @dev \\uacfc\\uac70 \\ubbf8\\uc815\\uc0b0\\ub41c Reward \\uc815\\uc0b0\\n        if (_checkpoint < currentEpoch) {\\n            uint256 _checkpointEpoch = (_checkpoint / 7 days) * 7 days;\\n\\n            for (uint256 _epoch = _checkpointEpoch; _epoch < currentEpoch; _epoch += 7 days) {\\n                uint256 _nextEpoch = _epoch + 7 days;\\n                amount += totalRewardPerWeek[_epoch] * (_nextEpoch - _checkpoint) / 7 days;\\n                _checkpoint = _nextEpoch;\\n            }\\n        }\\n\\n        amount += (\\n        totalRewardPerWeek[currentEpoch] * (block.timestamp - _checkpoint) / 7 days\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xa57a4b6888280372566da9282c4cba22e8d0ee88e28649ee16a4bcd2fa1b9564\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStakedStone.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IStakedStoneStruct {\\n    struct UnstakingRequest {\\n        uint256 id;\\n        uint256 amount;\\n        uint256 requestTs;\\n        bool isClaimed;\\n    }\\n\\n    struct RewardSnapshot {\\n        uint256 _growthGlobalLast;\\n        uint256 _owed;\\n    }\\n\\n    struct Dividend {\\n        // @dev \\ubc30\\ub2f9\\uae08 \\ubd84\\ubc30 \\uc2dc\\uc791 \\uc2dc\\uac01\\n        uint256 startDate;\\n        // @dev \\ubc30\\ub2f9\\uae08 \\ubd84\\ubc30 \\ub9c8\\uac10 \\uc2dc\\uac01\\n        uint256 recordDate;\\n        // @dev \\ucd1d \\ubc30\\ub2f9\\uae08 \\uc9c0\\ubd84 \\ud06c\\uae30 ( period * total Supply)\\n        uint256 totalShare;\\n        // @dev \\uc9c0\\uae09\\ub41c \\ubc30\\ub2f9\\uae08 \\ud1a0\\ud070\\n        address[] tokens;\\n        // @dev \\uc9c0\\uae09\\ub41c \\ubc30\\ub2f9\\uc561\\n        uint256[] amounts;\\n    }\\n\\n    struct DividendSnapshot {\\n        // @dev \\uc9c0\\uae09 \\uc5ec\\ubd80\\n        bool isPaid;\\n        // @dev \\ud560\\ub2f9\\ub41c \\ubc30\\ub2f9 \\ube44\\uc911\\n        uint256 share;\\n    }\\n\\n    struct AllocatedDividend {\\n        // @dev \\uc9c0\\uae09 \\uc5ec\\ubd80\\n        bool isPaid;\\n        // @dev \\ubc30\\ub2f9\\uae08 \\ud1a0\\ud070\\n        address[] tokens;\\n        // @dev \\uc9c0\\uae09\\ub41c \\ubc30\\ub2f9\\uc561\\n        uint256[] amounts;\\n    }\\n}\\n\\ninterface IStakedStoneEvent {\\n    event Stake(address indexed owner, uint256 amount);\\n\\n    event Unstake(address indexed owner, uint256 amount, uint256 requestId);\\n\\n    event Withdraw(address indexed owner, uint256 amount);\\n\\n    event Claim(address indexed owner, uint256 amount);\\n\\n    event UpdateCoolDown(uint256 prev, uint256 curr);\\n\\n    event DepositReward(address indexed operator, uint256 indexed weekStartTime, uint256 amount);\\n\\n    event CancelReward(address indexed operator, uint256 indexed weekStartTime, uint256 amount);\\n\\n    event ClaimDividend(address indexed owner, uint256 indexed epoch, address token, uint256 amount);\\n\\n    event SetDividend(uint256 indexed dividendId, uint256 startTime, uint256 recordDate, uint256 totalShare);\\n\\n    event ResetDividend(uint256 indexed dividendId);\\n\\n    event DepositDividend(uint256 indexed dividendId, address token, uint256 amount);\\n\\n    event ExecuteDividend(uint256 indexed dividendId, address[] token, uint256[] amount);\\n}\\n\\ninterface IStakedStone is IStakedStoneStruct, IStakedStoneEvent {\\n    function balanceOf(address owner) external view returns (uint256 amount);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function userDividendSnapshot(address owner, uint256 index) external view returns (DividendSnapshot memory);\\n\\n    function unstakingRequestCounts(address owner) external view returns (uint256);\\n\\n    function unstakingRequestByIndex(address owner, uint256 index) external view returns (UnstakingRequest memory);\\n\\n    function accumulativeUserReward(address owner) external view returns (uint256);\\n\\n    /**\\n     * @notice \\uc774\\ub54c\\uae4c\\uc9c0 \\ucd1d \\ubc30\\ub2f9 \\ud69f\\uc218\\n     */\\n    function totalDividendEpoch() external view returns (uint256);\\n\\n    /**\\n     * @notice \\ud574\\ub2f9 epoch\\uc5d0 \\ubc30\\uce58\\ub41c \\ubc30\\ub2f9\\uae08 \\uc870\\ud68c\\n     */\\n    function dividendInfo(uint256 epoch) external view returns (Dividend memory);\\n\\n    /**\\n     * @notice \\uc608\\uce58 \\uc694\\uccad\\ud558\\uae30\\n     */\\n    function stake(uint256 amount) external;\\n\\n    /**\\n     * @notice unstake \\uc694\\uccad\\ud558\\uae30, cooldown \\uc774\\ud6c4\\uc5d0 withdraw \\uac00\\ub2a5\\n     */\\n    function unstake(uint256 amount) external;\\n\\n    /**\\n     * @notice cooldown period\\uac00 \\uc9c0\\ub09c unstaking \\uc694\\uccad\\uc5d0 \\ub300\\ud55c stone \\uc778\\ucd9c\\ud558\\uae30\\n     */\\n    function withdraw(uint256 requestId) external returns (uint256);\\n\\n    /**\\n     * @notice \\ub9ac\\uc6cc\\ub4dc(\\uc2a4\\ud1a4) \\uc7ac\\uc608\\uce58\\ud558\\uae30\\n     */\\n    function reStake() external;\\n\\n    /**\\n     * @notice \\ub9ac\\uc6cc\\ub4dc(\\uc2a4\\ud1a4) \\uc218\\ub839\\ud558\\uae30\\n     */\\n    function claimReward() external returns (uint256);\\n\\n    /**\\n     * @notice calculate claimable STONE reward\\n     */\\n    function claimableReward(address owner) external view returns (uint256);\\n\\n    /**\\n     * @notice \\ubc30\\ub2f9\\uae08 \\uc218\\ub839\\n     */\\n    function claimDividend(uint256 epoch) external;\\n\\n    /**\\n     * @notice \\ud574\\ub2f9 epoch\\uc5d0 \\ud560\\ub2f9\\ub41c dividend \\uc870\\ud68c\\n     */\\n    function allocatedDividend(\\n        address owner,\\n        uint256 epoch\\n    ) external view returns (bool isPaid, address[] memory tokens, uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x2c82aed3da59519582a4561038498e75e3cbf8f7651eb146a4a1595eec089013\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary FixedPoint {\\n    uint8 internal constant Q128RES = 128;\\n    uint8 internal constant Q96RES = 96;\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x591a424ebe1e10342bf873b49a85989bcbca4b575846ed3d3f3a194f122fdbbd\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library that facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol.\\n/// @dev Handles \\\"phantom overflow\\\", i.e., allows multiplication and division where an intermediate value overflows 256 bits.\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b.\\n            // Compute the product mod 2**256 and mod 2**256 - 1,\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product.\\n            uint256 prod1; // Most significant 256 bits of the product.\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n            // Make sure the result is less than 2**256 -\\n            // also prevents denominator == 0.\\n            require(denominator > prod1);\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n            // Make division exact by subtracting the remainder from [prod1 prod0] -\\n            // compute remainder using mulmod.\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number.\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n            // Factor powers of two out of denominator -\\n            // compute largest power of two divisor of denominator\\n            // (always >= 1).\\n            uint256 twos = uint256(-int256(denominator)) & denominator;\\n            // Divide denominator by power of two.\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n            // Divide [prod1 prod0] by the factors of two.\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos -\\n            // if twos is zero, then it becomes one.\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n            // Invert denominator mod 2**256 -\\n            // now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // for four bits. That is, denominator * inv = 1 mod 2**4.\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**8.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**16.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**32.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**64.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**128.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**256.\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    function mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        unchecked {\\n            if (mulmod(a, b, denominator) != 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf07624e0963ebbaedd9e8d8f0a2d34c9abc0834d94367dd60bc7f3d5b56efcd1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614f19806100206000396000f3fe6080604052600436106102d55760003560e01c806381364c3d11610179578063cc5c1e08116100d6578063e748c0571161008a578063ec87621c11610064578063ec87621c146108f2578063f37aecaa14610907578063f86ee1631461095c57600080fd5b8063e748c0571461089d578063e9503425146108bd578063eba8a266146108dd57600080fd5b8063d428d9d6116100bb578063d428d9d614610830578063d547741f14610850578063e649872d1461087057600080fd5b8063cc5c1e08146107cd578063cd6dc6871461081057600080fd5b8063a986123e1161012d578063b88a802f11610112578063b88a802f14610776578063c415fcae1461078b578063c43e25cf146107b857600080fd5b8063a986123e14610734578063ac9650d81461074957600080fd5b80639abd35721161015e5780639abd3572146106df578063a217fddf146106ff578063a694fc3a1461071457600080fd5b806381364c3d1461067757806391d148541461068c57600080fd5b806336568abe116102325780635bfc4908116101e6578063712262b7116101c0578063712262b7146105fd57806377d72e941461062a57806380ea3de11461065757600080fd5b80635bfc49081461056b5780635f78d6bd1461059a57806370a08231146105ba57600080fd5b8063465fdaa311610217578063465fdaa3146104ab57806351d57ade146104c05780635806fa60146104d557600080fd5b806336568abe146104765780633da55ed81461049657600080fd5b806318160ddd116102895780632e17de781161026e5780632e17de78146104145780632e1a7d4d146104365780632f2ff15d1461045657600080fd5b806318160ddd146103cf578063248a9ca3146103e457600080fd5b8063026c4207116102ba578063026c42071461036857806304646a491461038c57806309356b9d146103a257600080fd5b80630167eb85146102e157806301ffc9a71461033857600080fd5b366102dc57005b600080fd5b3480156102ed57600080fd5b50609f5461030e9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561034457600080fd5b50610358610353366004614659565b61099e565b604051901515815260200161032f565b34801561037457600080fd5b5061037e609b5481565b60405190815260200161032f565b34801561039857600080fd5b5061037e609e5481565b3480156103ae57600080fd5b506103c26103bd36600461469b565b610a37565b60405161032f9190614735565b3480156103db57600080fd5b50609d5461037e565b3480156103f057600080fd5b5061037e6103ff36600461469b565b60009081526065602052604090206001015490565b34801561042057600080fd5b5061043461042f36600461469b565b610b81565b005b34801561044257600080fd5b5061037e61045136600461469b565b610e0d565b34801561046257600080fd5b506104346104713660046147d7565b61104b565b34801561048257600080fd5b506104346104913660046147d7565b611075565b3480156104a257600080fd5b5061037e611128565b3480156104b757600080fd5b50610434611170565b3480156104cc57600080fd5b506103c2611339565b3480156104e157600080fd5b5061054e6104f0366004614803565b6040805180820182526000808252602091820181905273ffffffffffffffffffffffffffffffffffffffff94909416845260a88152818420928452918252918290208251808401909352805460ff1615158352600101549082015290565b60408051825115158152602092830151928101929092520161032f565b34801561057757600080fd5b5061058b610586366004614803565b611457565b60405161032f9392919061482d565b3480156105a657600080fd5b506104346105b5366004614803565b611686565b3480156105c657600080fd5b5061037e6105d53660046148cb565b73ffffffffffffffffffffffffffffffffffffffff166000908152609c602052604090205490565b34801561060957600080fd5b5061037e6106183660046148cb565b60ab6020526000908152604090205481565b34801561063657600080fd5b5061064a6106453660046148cb565b6119b0565b60405161032f91906148e6565b34801561066357600080fd5b5061043461067236600461469b565b611aa0565b34801561068357600080fd5b50610434611b47565b34801561069857600080fd5b506103586106a73660046147d7565b600091825260656020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b3480156106eb57600080fd5b506104346106fa36600461469b565b611d55565b34801561070b57600080fd5b5061037e600081565b34801561072057600080fd5b5061043461072f36600461469b565b612144565b34801561074057600080fd5b5060a65461037e565b34801561075557600080fd5b50610769610764366004614997565b61226a565b60405161032f9190614a82565b34801561078257600080fd5b5061037e61235f565b34801561079757600080fd5b5061037e6107a63660046148cb565b60af6020526000908152604090205481565b3480156107c457600080fd5b50610434612422565b3480156107d957600080fd5b5061030e6107e836600461469b565b60aa6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b34801561081c57600080fd5b5061043461082b366004614803565b61273d565b34801561083c57600080fd5b5061043461084b366004614b02565b612924565b34801561085c57600080fd5b5061043461086b3660046147d7565b612ae7565b34801561087c57600080fd5b5061037e61088b36600461469b565b60976020526000908152604090205481565b3480156108a957600080fd5b506104346108b8366004614b02565b612b0c565b3480156108c957600080fd5b5061037e6108d83660046148cb565b612cd8565b3480156108e957600080fd5b50610434612d99565b3480156108fe57600080fd5b5061037e612e3b565b34801561091357600080fd5b50610927610922366004614803565b612e95565b60405161032f919081518152602080830151908201526040808301519082015260609182015115159181019190915260800190565b34801561096857600080fd5b5061097c61097736600461469b565b612f56565b604080519485526020850193909352918301521515606082015260800161032f565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b000000000000000000000000000000000000000000000000000000001480610a3157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b610a696040518060a0016040528060008152602001600081526020016000815260200160608152602001606081525090565b60a68281548110610a7c57610a7c614b24565b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015610b1957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610aee575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610b7157602002820191906000526020600020905b815481526020019060010190808311610b5d575b5050505050815250509050919050565b60a254339015610bf2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f4e204449564944454e4400000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000610bfc612f93565b9050610c088282613003565b610c118261308d565b336000908152609c602052604081208054859290610c30908490614b82565b9250508190555082609d6000828254610c499190614b82565b909155505060a980546040805160808101825282815260208082018881524283850190815260006060850181815260018801895597815293517fdc471888e6136f84c49e531e9c9240dc4e3fba66da9d3a49e2af6202133683e0600488029081019190915591517fdc471888e6136f84c49e531e9c9240dc4e3fba66da9d3a49e2af6202133683e1830155517fdc471888e6136f84c49e531e9c9240dc4e3fba66da9d3a49e2af6202133683e282015594517fdc471888e6136f84c49e531e9c9240dc4e3fba66da9d3a49e2af6202133683e390950180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169515159590951790945533815260ab909352822080549192919082610d6783614b99565b90915550600083815260aa6020908152604080832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163390811790915580845260ac8352818420858552835281842087905586845260ad835292819020849055805189815291820186905292935090917ff960dbf9e5d0682f7a298ed974e33a28b4464914b7a2bfac12ae419a9afeb28091015b60405180910390a25050505050565b60008060a98381548110610e2357610e23614b24565b60009182526020918290206040805160808101825260049093029091018054835260018101549383019390935260028301549082015260039091015460ff161580156060830152909150610ed3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f414c524541445920434c41494d454400000000000000000000000000000000006044820152606401610be9565b600083815260aa602052604090205473ffffffffffffffffffffffffffffffffffffffff163314610f60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f54204f574e455200000000000000000000000000000000000000000000006044820152606401610be9565b42609e548260400151610f739190614bd2565b1115610fdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e45454420434f4f4c444f574e000000000000000000000000000000000000006044820152606401610be9565b80602001519150610fec33846130bf565b609f546110109073ffffffffffffffffffffffffffffffffffffffff1633846131ec565b60405182815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250919050565b600082815260656020526040902060010154611066816132c0565b61107083836132cd565b505050565b73ffffffffffffffffffffffffffffffffffffffff8116331461111a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610be9565b61112482826133c1565b5050565b60a654600090611139575060a05490565b60a6805461114990600190614b82565b8154811061115957611159614b24565b906000526020600020906005020160010154905090565b6040516020016111b19060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b604051602081830303815290604052805190602001206111d0816132c0565b60a254611239576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4e4f5420534554000000000000000000000000000000000000000000000000006044820152606401610be9565b60005b60a4548110156112dc57600060a1600301828154811061125e5761125e614b24565b600091825260208220015460a5805473ffffffffffffffffffffffffffffffffffffffff9092169350908490811061129857611298614b24565b60009182526020909120015490506112c773ffffffffffffffffffffffffffffffffffffffff831633836131ec565b505080806112d490614b99565b91505061123c565b50600060a181815560a282905560a3829055906112fa60a482614565565b611308600483016000614565565b505060a6546040517f89c1ba38b85b2ef703b7be0205683eb60bad532e0393ea83035e234a1473791090600090a250565b61136b6040518060a0016040528060008152602001600081526020016000815260200160608152602001606081525090565b6040805160a08101825260a18054825260a25460208084019190915260a3548385015260a48054855181840281018401909652808652939492936060860193928301828280156113f157602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116113c6575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561144957602002820191906000526020600020905b815481526020019060010190808311611435575b505050505081525050905090565b6000606080600060a6858154811061147157611471614b24565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820180548060200260200160405190810160405280929190818152602001828054801561150e57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116114e3575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561156657602002820191906000526020600020905b815481526020019060010190808311611552575b50505050508152505090508060600151925080606001515167ffffffffffffffff81111561159657611596614bea565b6040519080825280602002602001820160405280156115bf578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff8716600090815260a86020908152604080832089845290915281205460ff16955090925061160487878461347c565b90508061161257505061167f565b604082015160005b845181101561167a5761164b8460800151828151811061163c5761163c614b24565b6020026020010151848461353d565b85828151811061165d5761165d614b24565b60209081029190910101528061167281614b99565b91505061161a565b505050505b9250925092565b6040516020016116c79060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b604051602081830303815290604052805190602001206116e6816132c0565b60a25461174f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4e4f5420534554000000000000000000000000000000000000000000000000006044820152606401610be9565b600082116117b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e4f54205a45524f0000000000000000000000000000000000000000000000006044820152606401610be9565b6117db73ffffffffffffffffffffffffffffffffffffffff841633308561360e565b60005b60a4548110156118ca57600060a1600301828154811061180057611800614b24565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff90811691508516811461183457506118b8565b8360a1600401838154811061184b5761184b614b24565b9060005260206000200160008282546118649190614bd2565b909155505060a6546040805173ffffffffffffffffffffffffffffffffffffffff88168152602081018790527f42aeda043a53e048de3d1643589f86a93851f5b509fc4eef44e804713ec849b99101610dfe565b806118c281614b99565b9150506117de565b5060a4805460018082019092557fe434dc35da084cf8d7e8186688ea2dacb53db7003d427af3abf351bd9d0a4e8d0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915560a5805492830181556000527fb29a2b3b6f2ff1b765777a231725941da5072cc4fcc30ac4a2ce09706e8ddeff90910183905560a654604080519283526020830185905290917f42aeda043a53e048de3d1643589f86a93851f5b509fc4eef44e804713ec849b9910160405180910390a2505050565b60a6546060908067ffffffffffffffff8111156119cf576119cf614bea565b604051908082528060200260200182016040528015611a2657816020015b611a13604051806060016040528060001515815260200160608152602001606081525090565b8152602001906001900390816119ed5790505b50915060005b81811015611a99576000806000611a438785611457565b9250925092506040518060600160405280841515815260200183815260200182815250868581518110611a7857611a78614b24565b60200260200101819052505050508080611a9190614b99565b915050611a2c565b5050919050565b604051602001611ae19060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b60405160208183030381529060405280519060200120611b00816132c0565b609e80549083905560408051828152602081018590527fe54abd71d5bfcd010a9afd9b82fa4f6d9873e50f949a087bd32aff503a8a8b8791015b60405180910390a1505050565b604051602001611b889060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b60405160208183030381529060405280519060200120611ba7816132c0565b60a054421015611c13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f5420535441525400000000000000000000000000000000000000000000006044820152606401610be9565b611c1b612f93565b5060a25415611c86576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f414c5245414459205345540000000000000000000000000000000000000000006044820152606401610be9565b6000609b5411611cf2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f544f54414c205348415245204e4f54205a45524f0000000000000000000000006044820152606401610be9565b611cfa611128565b60a18190554260a2819055609b5460a381905560a65460408051948552602085019390935291830152907f8084edb4cf8c3ad32f1f26a4b075ae554a2a5283e0965f45ecc628f6b5dbc786906060015b60405180910390a250565b60a254339015611dc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f4e204449564944454e440000000000000000000000000000000000000000006044820152606401610be9565b6000611dcb612f93565b9050611dd78282613003565b611de08261308d565b33600090815260a8602090815260408083208684528252918290208251808401909352805460ff16158015845260019091015491830191909152611e80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f414c5245414459205041494400000000000000000000000000000000000000006044820152606401610be9565b6000816020015111611eee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e4f2053484152450000000000000000000000000000000000000000000000006044820152606401610be9565b600060a68581548110611f0357611f03614b24565b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015611fa057602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611f75575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611ff857602002820191906000526020600020905b815481526020019060010190808311611fe4575b5050509190925250505060408082015133600090815260a860209081528382208a8352905291822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790559192505b82606001515181101561213b5760008360600151828151811061207257612072614b24565b6020026020010151905060008460800151838151811061209457612094614b24565b6020026020010151905060006120af8288602001518761353d565b90506120d273ffffffffffffffffffffffffffffffffffffffff841633836131ec565b6040805173ffffffffffffffffffffffffffffffffffffffff85168152602081018390528b9133917f1b21e5e267d298d0cfa6802a843faf3c104b8ec7d575be035bfbfbc0cb9b878f910160405180910390a3505050808061213390614b99565b91505061204d565b50505050505050565b60a2543390156121b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f4e204449564944454e440000000000000000000000000000000000000000006044820152606401610be9565b60006121ba612f93565b90506121c68282613003565b6121cf8261308d565b60a05442101561223b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f5420535441525400000000000000000000000000000000000000000000006044820152606401610be9565b609f546122609073ffffffffffffffffffffffffffffffffffffffff1633308661360e565b6110703384613672565b60608167ffffffffffffffff81111561228557612285614bea565b6040519080825280602002602001820160405280156122b857816020015b60608152602001906001900390816122a35790505b50905060005b8281101561235857612328308585848181106122dc576122dc614b24565b90506020028101906122ee9190614c19565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061371492505050565b82828151811061233a5761233a614b24565b6020026020010181905250808061235090614b99565b9150506122be565b5092915050565b60a2546000903390156123ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f4e204449564944454e440000000000000000000000000000000000000000006044820152606401610be9565b60006123d8612f93565b90506123e48282613003565b6123ed8261308d565b6123f633613739565b609f5490935061241d9073ffffffffffffffffffffffffffffffffffffffff1633856131ec565b505090565b6040516020016124639060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b60405160208183030381529060405280519060200120612482816132c0565b60a2546124eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4e4f5420534554000000000000000000000000000000000000000000000000006044820152606401610be9565b60a454612554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f204445504f534954000000000000000000000000000000000000000000006044820152606401610be9565b61255c612f93565b506040805160a08101825260a154815260a25460208083019190915260a3548284015260a4805484518184028101840190955280855260a6946060850193909291908301828280156125e457602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116125b9575b5050505050815260200160a160040180548060200260200160405190810160405280929190818152602001828054801561263d57602002820191906000526020600020905b815481526020019060010190808311612629575b5050509190925250508154600181810184556000938452602093849020835160059093020191825583830151908201556040820151600282015560608201518051929391926126929260038501920190614583565b50608082015180516126ae916004840191602090910190614609565b50505060a160020154609b60008282546126c89190614b82565b9091555050600060a181815560a282905560a3829055906126ea60a482614565565b6126f8600483016000614565565b505060a65461270990600190614b82565b6040517fa6e0490be65d6d4bce57d7b18ba16b514a5b039e85ed295305d1e9e63f557dec90611d4a9060a49060a590614c85565b600054610100900460ff161580801561275d5750600054600160ff909116105b806127775750303b158015612777575060005460ff166001145b612803576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610be9565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561286157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b609f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff851617905562093a80609e5560a082905560988290556128ba6137c4565b6128c560003361385d565b801561107057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611b3a565b6040516020016129659060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b60405160208183030381529060405280519060200120612984816132c0565b61299162093a8083614d50565b156129f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f737461727454696d6520252037206461797320213d20300000000000000000006044820152606401610be9565b42821015612a62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f544f4f204c4154450000000000000000000000000000000000000000000000006044820152606401610be9565b609f54612a879073ffffffffffffffffffffffffffffffffffffffff1633308661360e565b60008281526097602052604081208054859290612aa5908490614bd2565b9091555050604051838152829033907f11df96c8b9e61be6108e9001f87a321a1aa58b0fffbb02a3e5cb1a490de7f875906020015b60405180910390a3505050565b600082815260656020526040902060010154612b02816132c0565b61107083836133c1565b604051602001612b4d9060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b60405160208183030381529060405280519060200120612b6c816132c0565b42821015612bd6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f544f4f204c4154450000000000000000000000000000000000000000000000006044820152606401610be9565b60008281526097602052604081208054859290612bf4908490614b82565b9091555050609f546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810185905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90604401602060405180830381600087803b158015612c6b57600080fd5b505af1158015612c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca39190614d64565b50604051838152829033907fff16e0f040677e89c03a5b04dddd1656d379b6a72ce0faf921c47af7d285740490602001612ada565b600080609a54612ce6613867565b612cf09190614bd2565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260ae6020908152604091829020825180840190935280548084526001909101549183018290529293509091612d8790612d4485613974565b612d4e9190614b82565b73ffffffffffffffffffffffffffffffffffffffff87166000908152609c60205260409020546c0100000000000000000000000061353d565b612d919190614bd2565b949350505050565b60a254339015612e05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f4e204449564944454e440000000000000000000000000000000000000000006044820152606401610be9565b6000612e0f612f93565b9050612e1b8282613003565b612e248261308d565b6000612e2f33613739565b90506110703382613672565b604051602001612e7c9060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b6040516020818303038152906040528051906020012081565b612ec260405180608001604052806000815260200160008152602001600081526020016000151581525090565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260ac6020908152604080832085845290915290205460a9805482908110612f0757612f07614b24565b60009182526020918290206040805160808101825260049093029091018054835260018101549383019390935260028301549082015260039091015460ff161515606082015291505092915050565b60a98181548110612f6657600080fd5b60009182526020909120600490910201805460018201546002830154600390930154919350919060ff1684565b60985460009081612fa2613867565b9050612fad816139b6565b9050612fb881613974565b60998190559250428210612fcb57505090565b609d54612fd88342614b82565b612fe29190614d86565b609b6000828254612ff39190614bd2565b9091555050426098555090919050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260ae602052604090208054613071906130389084614b82565b73ffffffffffffffffffffffffffffffffffffffff85166000908152609c60205260409020546c0100000000000000000000000061353d565b8160010160008282546130849190614bd2565b90915550505550565b61309681613a03565b73ffffffffffffffffffffffffffffffffffffffff16600090815260a760205260409020429055565b600160a982815481106130d4576130d4614b24565b6000918252602080832060049290920290910160030180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169315159390931790925573ffffffffffffffffffffffffffffffffffffffff8416815260ab909152604081208054829061314790614dc3565b9182905550600083815260ad60205260409020549091508082146131ac5773ffffffffffffffffffffffffffffffffffffffff8416600090815260ac60209081526040808320858452825280832054848452818420819055835260ad90915290208190555b50600091825260ad6020908152604080842084905573ffffffffffffffffffffffffffffffffffffffff909416835260ac81528383209183525290812055565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526110709084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613e17565b6132ca8133613f23565b50565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661112457600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556133633390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561112457600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260a860209081526040808320868452825280832060010154938352609c909152902054806134c65750613536565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260a7602052604081205484516134f89190613ff5565b90508084602001511161350c575050613536565b8181856020015161351d9190614b82565b6135279190614d86565b6135319084614bd2565b925050505b9392505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415613595576000841161358a57600080fd5b508290049050613536565b8084116135a157600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201526064810182905261366c9085907f23b872dd000000000000000000000000000000000000000000000000000000009060840161323e565b50505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152609c6020526040812080548392906136a7908490614bd2565b9250508190555080609d60008282546136c09190614bd2565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316907febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a9060200160405180910390a25050565b60606135368383604051806060016040528060278152602001614ebd6027913961400c565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260ae6020908152604080832060010180549084905533845260af9092528220805491928392613785908490614bd2565b909155505060405181815233907f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d49060200160405180910390a2919050565b600054610100900460ff1661385b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610be9565b565b61112482826132cd565b6098546000904281111561387d57600091505090565b600061388c62093a8042614df8565b6138999062093a80614d86565b9050808210156139325760006138b262093a8084614df8565b6138bf9062093a80614d86565b9050805b8281101561392f5760006138da8262093a80614bd2565b905062093a806138ea8683614b82565b6000848152609760205260409020546139039190614d86565b61390d9190614df8565b6139179087614bd2565b9550935061392862093a8082614bd2565b90506138c3565b50505b62093a806139408342614b82565b6000838152609760205260409020546139599190614d86565b6139639190614df8565b61396d9084614bd2565b9250505090565b609954811580159061398857506000609d54115b156139b1576139a7826c01000000000000000000000000609d5461353d565b610a319082614bd2565b919050565b6000609d54600014156139e25781609a60008282546139d59190614bd2565b9091555060009392505050565b609a54156139ff57609a546139f79083614bd2565b6000609a5591505b5090565b73ffffffffffffffffffffffffffffffffffffffff81166000908152609c602052604090205480613a32575050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260a7602052604090205460a654613ac15781613a6a8242614b82565b613a749190614d86565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260a86020908152604080832083805290915281206001018054909190613ab7908490614bd2565b9091555050505050565b60a654600090613ad390600190614b82565b9050600060a68281548110613aea57613aea614b24565b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015613b8757602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311613b5c575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015613bdf57602002820191906000526020600020905b815481526020019060010190808311613bcb575b50505050508152505090506000613bfa826020015185613ff5565b613c049042614b82565b9050613c108582614d86565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260a86020526040812090613c41866001614bd2565b81526020019081526020016000206001016000828254613c619190614bd2565b90915550505b8382602001511115613e0f578151613c7f9085613ff5565b8260200151613c8e9190614b82565b9050613c9a8582614d86565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260a86020908152604080832087845290915281206001018054909190613cdd908490614bd2565b909155505082613cec57613e0f565b60a6613cf784614dc3565b93508381548110613d0a57613d0a614b24565b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015613da757602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311613d7c575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015613dff57602002820191906000526020600020905b815481526020019060010190808311613deb575b5050505050815250509150613c67565b505050505050565b6000613e79826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661412a9092919063ffffffff16565b8051909150156110705780806020019051810190613e979190614d64565b611070576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610be9565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661112457613f7b8173ffffffffffffffffffffffffffffffffffffffff166014614139565b613f86836020614139565b604051602001613f97929190614e0c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610be991600401614e8d565b6000818310156140055781613536565b5090919050565b606073ffffffffffffffffffffffffffffffffffffffff84163b6140b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610be9565b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516140da9190614ea0565b600060405180830381855af49150503d8060008114614115576040519150601f19603f3d011682016040523d82523d6000602084013e61411a565b606091505b509150915061353182828661437c565b6060612d9184846000856143cf565b60606000614148836002614d86565b614153906002614bd2565b67ffffffffffffffff81111561416b5761416b614bea565b6040519080825280601f01601f191660200182016040528015614195576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106141cc576141cc614b24565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061422f5761422f614b24565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061426b846002614d86565b614276906001614bd2565b90505b6001811115614313577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106142b7576142b7614b24565b1a60f81b8282815181106142cd576142cd614b24565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361430c81614dc3565b9050614279565b508315613536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610be9565b6060831561438b575081613536565b82511561439b5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be99190614e8d565b606082471015614461576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610be9565b73ffffffffffffffffffffffffffffffffffffffff85163b6144df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610be9565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516145089190614ea0565b60006040518083038185875af1925050503d8060008114614545576040519150601f19603f3d011682016040523d82523d6000602084013e61454a565b606091505b509150915061455a82828661437c565b979650505050505050565b50805460008255906000526020600020908101906132ca9190614644565b8280548282559060005260206000209081019282156145fd579160200282015b828111156145fd57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9091161782556020909201916001909101906145a3565b506139ff929150614644565b8280548282559060005260206000209081019282156145fd579160200282015b828111156145fd578251825591602001919060010190614629565b5b808211156139ff5760008155600101614645565b60006020828403121561466b57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461353657600080fd5b6000602082840312156146ad57600080fd5b5035919050565b600081518084526020808501945080840160005b838110156146fa57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016146c8565b509495945050505050565b600081518084526020808501945080840160005b838110156146fa57815187529582019590820190600101614719565b602081528151602082015260208201516040820152604082015160608201526000606083015160a0608084015261476f60c08401826146b4565b905060808401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08483030160a08501526147aa8282614705565b95945050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146139b157600080fd5b600080604083850312156147ea57600080fd5b823591506147fa602084016147b3565b90509250929050565b6000806040838503121561481657600080fd5b61481f836147b3565b946020939093013593505050565b60006060820185151583526020606081850152818651808452608086019150828801935060005b8181101561488657845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101614854565b50508481036040860152855180825290820192508186019060005b818110156148bd578251855293830193918301916001016148a1565b509298975050505050505050565b6000602082840312156148dd57600080fd5b613536826147b3565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015614989577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08984030185528151606081511515855288820151818a87015261495b828701826146b4565b915050878201519150848103888601526149758183614705565b96890196945050509086019060010161490d565b509098975050505050505050565b600080602083850312156149aa57600080fd5b823567ffffffffffffffff808211156149c257600080fd5b818501915085601f8301126149d657600080fd5b8135818111156149e557600080fd5b8660208260051b85010111156149fa57600080fd5b60209290920196919550909350505050565b60005b83811015614a27578181015183820152602001614a0f565b8381111561366c5750506000910152565b60008151808452614a50816020860160208601614a0c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614af5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452614ae3858351614a38565b94509285019290850190600101614aa9565b5092979650505050505050565b60008060408385031215614b1557600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015614b9457614b94614b53565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614bcb57614bcb614b53565b5060010190565b60008219821115614be557614be5614b53565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614c4e57600080fd5b83018035915067ffffffffffffffff821115614c6957600080fd5b602001915036819003821315614c7e57600080fd5b9250929050565b60006040820160408352808554808352606085019150600092508683526020808420845b83811015614cdb57815473ffffffffffffffffffffffffffffffffffffffff1685529382019360019182019101614ca9565b505085830381870152865480845287855281852093820192505b80851015614d1457835483526001948501949093019291810191614cf5565b5090979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082614d5f57614d5f614d21565b500690565b600060208284031215614d7657600080fd5b8151801515811461353657600080fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614dbe57614dbe614b53565b500290565b600081614dd257614dd2614b53565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600082614e0757614e07614d21565b500490565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614e44816017850160208801614a0c565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614e81816028840160208801614a0c565b01602801949350505050565b6020815260006135366020830184614a38565b60008251614eb2818460208701614a0c565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ec835d628bc01547823e80b0135c8a1027c5426f6c2c20376c30aa06950daf9464736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102d55760003560e01c806381364c3d11610179578063cc5c1e08116100d6578063e748c0571161008a578063ec87621c11610064578063ec87621c146108f2578063f37aecaa14610907578063f86ee1631461095c57600080fd5b8063e748c0571461089d578063e9503425146108bd578063eba8a266146108dd57600080fd5b8063d428d9d6116100bb578063d428d9d614610830578063d547741f14610850578063e649872d1461087057600080fd5b8063cc5c1e08146107cd578063cd6dc6871461081057600080fd5b8063a986123e1161012d578063b88a802f11610112578063b88a802f14610776578063c415fcae1461078b578063c43e25cf146107b857600080fd5b8063a986123e14610734578063ac9650d81461074957600080fd5b80639abd35721161015e5780639abd3572146106df578063a217fddf146106ff578063a694fc3a1461071457600080fd5b806381364c3d1461067757806391d148541461068c57600080fd5b806336568abe116102325780635bfc4908116101e6578063712262b7116101c0578063712262b7146105fd57806377d72e941461062a57806380ea3de11461065757600080fd5b80635bfc49081461056b5780635f78d6bd1461059a57806370a08231146105ba57600080fd5b8063465fdaa311610217578063465fdaa3146104ab57806351d57ade146104c05780635806fa60146104d557600080fd5b806336568abe146104765780633da55ed81461049657600080fd5b806318160ddd116102895780632e17de781161026e5780632e17de78146104145780632e1a7d4d146104365780632f2ff15d1461045657600080fd5b806318160ddd146103cf578063248a9ca3146103e457600080fd5b8063026c4207116102ba578063026c42071461036857806304646a491461038c57806309356b9d146103a257600080fd5b80630167eb85146102e157806301ffc9a71461033857600080fd5b366102dc57005b600080fd5b3480156102ed57600080fd5b50609f5461030e9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561034457600080fd5b50610358610353366004614659565b61099e565b604051901515815260200161032f565b34801561037457600080fd5b5061037e609b5481565b60405190815260200161032f565b34801561039857600080fd5b5061037e609e5481565b3480156103ae57600080fd5b506103c26103bd36600461469b565b610a37565b60405161032f9190614735565b3480156103db57600080fd5b50609d5461037e565b3480156103f057600080fd5b5061037e6103ff36600461469b565b60009081526065602052604090206001015490565b34801561042057600080fd5b5061043461042f36600461469b565b610b81565b005b34801561044257600080fd5b5061037e61045136600461469b565b610e0d565b34801561046257600080fd5b506104346104713660046147d7565b61104b565b34801561048257600080fd5b506104346104913660046147d7565b611075565b3480156104a257600080fd5b5061037e611128565b3480156104b757600080fd5b50610434611170565b3480156104cc57600080fd5b506103c2611339565b3480156104e157600080fd5b5061054e6104f0366004614803565b6040805180820182526000808252602091820181905273ffffffffffffffffffffffffffffffffffffffff94909416845260a88152818420928452918252918290208251808401909352805460ff1615158352600101549082015290565b60408051825115158152602092830151928101929092520161032f565b34801561057757600080fd5b5061058b610586366004614803565b611457565b60405161032f9392919061482d565b3480156105a657600080fd5b506104346105b5366004614803565b611686565b3480156105c657600080fd5b5061037e6105d53660046148cb565b73ffffffffffffffffffffffffffffffffffffffff166000908152609c602052604090205490565b34801561060957600080fd5b5061037e6106183660046148cb565b60ab6020526000908152604090205481565b34801561063657600080fd5b5061064a6106453660046148cb565b6119b0565b60405161032f91906148e6565b34801561066357600080fd5b5061043461067236600461469b565b611aa0565b34801561068357600080fd5b50610434611b47565b34801561069857600080fd5b506103586106a73660046147d7565b600091825260656020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b3480156106eb57600080fd5b506104346106fa36600461469b565b611d55565b34801561070b57600080fd5b5061037e600081565b34801561072057600080fd5b5061043461072f36600461469b565b612144565b34801561074057600080fd5b5060a65461037e565b34801561075557600080fd5b50610769610764366004614997565b61226a565b60405161032f9190614a82565b34801561078257600080fd5b5061037e61235f565b34801561079757600080fd5b5061037e6107a63660046148cb565b60af6020526000908152604090205481565b3480156107c457600080fd5b50610434612422565b3480156107d957600080fd5b5061030e6107e836600461469b565b60aa6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b34801561081c57600080fd5b5061043461082b366004614803565b61273d565b34801561083c57600080fd5b5061043461084b366004614b02565b612924565b34801561085c57600080fd5b5061043461086b3660046147d7565b612ae7565b34801561087c57600080fd5b5061037e61088b36600461469b565b60976020526000908152604090205481565b3480156108a957600080fd5b506104346108b8366004614b02565b612b0c565b3480156108c957600080fd5b5061037e6108d83660046148cb565b612cd8565b3480156108e957600080fd5b50610434612d99565b3480156108fe57600080fd5b5061037e612e3b565b34801561091357600080fd5b50610927610922366004614803565b612e95565b60405161032f919081518152602080830151908201526040808301519082015260609182015115159181019190915260800190565b34801561096857600080fd5b5061097c61097736600461469b565b612f56565b604080519485526020850193909352918301521515606082015260800161032f565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b000000000000000000000000000000000000000000000000000000001480610a3157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b610a696040518060a0016040528060008152602001600081526020016000815260200160608152602001606081525090565b60a68281548110610a7c57610a7c614b24565b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015610b1957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610aee575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610b7157602002820191906000526020600020905b815481526020019060010190808311610b5d575b5050505050815250509050919050565b60a254339015610bf2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f4e204449564944454e4400000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000610bfc612f93565b9050610c088282613003565b610c118261308d565b336000908152609c602052604081208054859290610c30908490614b82565b9250508190555082609d6000828254610c499190614b82565b909155505060a980546040805160808101825282815260208082018881524283850190815260006060850181815260018801895597815293517fdc471888e6136f84c49e531e9c9240dc4e3fba66da9d3a49e2af6202133683e0600488029081019190915591517fdc471888e6136f84c49e531e9c9240dc4e3fba66da9d3a49e2af6202133683e1830155517fdc471888e6136f84c49e531e9c9240dc4e3fba66da9d3a49e2af6202133683e282015594517fdc471888e6136f84c49e531e9c9240dc4e3fba66da9d3a49e2af6202133683e390950180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169515159590951790945533815260ab909352822080549192919082610d6783614b99565b90915550600083815260aa6020908152604080832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163390811790915580845260ac8352818420858552835281842087905586845260ad835292819020849055805189815291820186905292935090917ff960dbf9e5d0682f7a298ed974e33a28b4464914b7a2bfac12ae419a9afeb28091015b60405180910390a25050505050565b60008060a98381548110610e2357610e23614b24565b60009182526020918290206040805160808101825260049093029091018054835260018101549383019390935260028301549082015260039091015460ff161580156060830152909150610ed3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f414c524541445920434c41494d454400000000000000000000000000000000006044820152606401610be9565b600083815260aa602052604090205473ffffffffffffffffffffffffffffffffffffffff163314610f60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f54204f574e455200000000000000000000000000000000000000000000006044820152606401610be9565b42609e548260400151610f739190614bd2565b1115610fdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e45454420434f4f4c444f574e000000000000000000000000000000000000006044820152606401610be9565b80602001519150610fec33846130bf565b609f546110109073ffffffffffffffffffffffffffffffffffffffff1633846131ec565b60405182815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250919050565b600082815260656020526040902060010154611066816132c0565b61107083836132cd565b505050565b73ffffffffffffffffffffffffffffffffffffffff8116331461111a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610be9565b61112482826133c1565b5050565b60a654600090611139575060a05490565b60a6805461114990600190614b82565b8154811061115957611159614b24565b906000526020600020906005020160010154905090565b6040516020016111b19060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b604051602081830303815290604052805190602001206111d0816132c0565b60a254611239576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4e4f5420534554000000000000000000000000000000000000000000000000006044820152606401610be9565b60005b60a4548110156112dc57600060a1600301828154811061125e5761125e614b24565b600091825260208220015460a5805473ffffffffffffffffffffffffffffffffffffffff9092169350908490811061129857611298614b24565b60009182526020909120015490506112c773ffffffffffffffffffffffffffffffffffffffff831633836131ec565b505080806112d490614b99565b91505061123c565b50600060a181815560a282905560a3829055906112fa60a482614565565b611308600483016000614565565b505060a6546040517f89c1ba38b85b2ef703b7be0205683eb60bad532e0393ea83035e234a1473791090600090a250565b61136b6040518060a0016040528060008152602001600081526020016000815260200160608152602001606081525090565b6040805160a08101825260a18054825260a25460208084019190915260a3548385015260a48054855181840281018401909652808652939492936060860193928301828280156113f157602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116113c6575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561144957602002820191906000526020600020905b815481526020019060010190808311611435575b505050505081525050905090565b6000606080600060a6858154811061147157611471614b24565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820180548060200260200160405190810160405280929190818152602001828054801561150e57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116114e3575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561156657602002820191906000526020600020905b815481526020019060010190808311611552575b50505050508152505090508060600151925080606001515167ffffffffffffffff81111561159657611596614bea565b6040519080825280602002602001820160405280156115bf578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff8716600090815260a86020908152604080832089845290915281205460ff16955090925061160487878461347c565b90508061161257505061167f565b604082015160005b845181101561167a5761164b8460800151828151811061163c5761163c614b24565b6020026020010151848461353d565b85828151811061165d5761165d614b24565b60209081029190910101528061167281614b99565b91505061161a565b505050505b9250925092565b6040516020016116c79060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b604051602081830303815290604052805190602001206116e6816132c0565b60a25461174f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4e4f5420534554000000000000000000000000000000000000000000000000006044820152606401610be9565b600082116117b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e4f54205a45524f0000000000000000000000000000000000000000000000006044820152606401610be9565b6117db73ffffffffffffffffffffffffffffffffffffffff841633308561360e565b60005b60a4548110156118ca57600060a1600301828154811061180057611800614b24565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff90811691508516811461183457506118b8565b8360a1600401838154811061184b5761184b614b24565b9060005260206000200160008282546118649190614bd2565b909155505060a6546040805173ffffffffffffffffffffffffffffffffffffffff88168152602081018790527f42aeda043a53e048de3d1643589f86a93851f5b509fc4eef44e804713ec849b99101610dfe565b806118c281614b99565b9150506117de565b5060a4805460018082019092557fe434dc35da084cf8d7e8186688ea2dacb53db7003d427af3abf351bd9d0a4e8d0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915560a5805492830181556000527fb29a2b3b6f2ff1b765777a231725941da5072cc4fcc30ac4a2ce09706e8ddeff90910183905560a654604080519283526020830185905290917f42aeda043a53e048de3d1643589f86a93851f5b509fc4eef44e804713ec849b9910160405180910390a2505050565b60a6546060908067ffffffffffffffff8111156119cf576119cf614bea565b604051908082528060200260200182016040528015611a2657816020015b611a13604051806060016040528060001515815260200160608152602001606081525090565b8152602001906001900390816119ed5790505b50915060005b81811015611a99576000806000611a438785611457565b9250925092506040518060600160405280841515815260200183815260200182815250868581518110611a7857611a78614b24565b60200260200101819052505050508080611a9190614b99565b915050611a2c565b5050919050565b604051602001611ae19060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b60405160208183030381529060405280519060200120611b00816132c0565b609e80549083905560408051828152602081018590527fe54abd71d5bfcd010a9afd9b82fa4f6d9873e50f949a087bd32aff503a8a8b8791015b60405180910390a1505050565b604051602001611b889060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b60405160208183030381529060405280519060200120611ba7816132c0565b60a054421015611c13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f5420535441525400000000000000000000000000000000000000000000006044820152606401610be9565b611c1b612f93565b5060a25415611c86576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f414c5245414459205345540000000000000000000000000000000000000000006044820152606401610be9565b6000609b5411611cf2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f544f54414c205348415245204e4f54205a45524f0000000000000000000000006044820152606401610be9565b611cfa611128565b60a18190554260a2819055609b5460a381905560a65460408051948552602085019390935291830152907f8084edb4cf8c3ad32f1f26a4b075ae554a2a5283e0965f45ecc628f6b5dbc786906060015b60405180910390a250565b60a254339015611dc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f4e204449564944454e440000000000000000000000000000000000000000006044820152606401610be9565b6000611dcb612f93565b9050611dd78282613003565b611de08261308d565b33600090815260a8602090815260408083208684528252918290208251808401909352805460ff16158015845260019091015491830191909152611e80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f414c5245414459205041494400000000000000000000000000000000000000006044820152606401610be9565b6000816020015111611eee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e4f2053484152450000000000000000000000000000000000000000000000006044820152606401610be9565b600060a68581548110611f0357611f03614b24565b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015611fa057602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611f75575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611ff857602002820191906000526020600020905b815481526020019060010190808311611fe4575b5050509190925250505060408082015133600090815260a860209081528382208a8352905291822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790559192505b82606001515181101561213b5760008360600151828151811061207257612072614b24565b6020026020010151905060008460800151838151811061209457612094614b24565b6020026020010151905060006120af8288602001518761353d565b90506120d273ffffffffffffffffffffffffffffffffffffffff841633836131ec565b6040805173ffffffffffffffffffffffffffffffffffffffff85168152602081018390528b9133917f1b21e5e267d298d0cfa6802a843faf3c104b8ec7d575be035bfbfbc0cb9b878f910160405180910390a3505050808061213390614b99565b91505061204d565b50505050505050565b60a2543390156121b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f4e204449564944454e440000000000000000000000000000000000000000006044820152606401610be9565b60006121ba612f93565b90506121c68282613003565b6121cf8261308d565b60a05442101561223b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f5420535441525400000000000000000000000000000000000000000000006044820152606401610be9565b609f546122609073ffffffffffffffffffffffffffffffffffffffff1633308661360e565b6110703384613672565b60608167ffffffffffffffff81111561228557612285614bea565b6040519080825280602002602001820160405280156122b857816020015b60608152602001906001900390816122a35790505b50905060005b8281101561235857612328308585848181106122dc576122dc614b24565b90506020028101906122ee9190614c19565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061371492505050565b82828151811061233a5761233a614b24565b6020026020010181905250808061235090614b99565b9150506122be565b5092915050565b60a2546000903390156123ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f4e204449564944454e440000000000000000000000000000000000000000006044820152606401610be9565b60006123d8612f93565b90506123e48282613003565b6123ed8261308d565b6123f633613739565b609f5490935061241d9073ffffffffffffffffffffffffffffffffffffffff1633856131ec565b505090565b6040516020016124639060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b60405160208183030381529060405280519060200120612482816132c0565b60a2546124eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4e4f5420534554000000000000000000000000000000000000000000000000006044820152606401610be9565b60a454612554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f204445504f534954000000000000000000000000000000000000000000006044820152606401610be9565b61255c612f93565b506040805160a08101825260a154815260a25460208083019190915260a3548284015260a4805484518184028101840190955280855260a6946060850193909291908301828280156125e457602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116125b9575b5050505050815260200160a160040180548060200260200160405190810160405280929190818152602001828054801561263d57602002820191906000526020600020905b815481526020019060010190808311612629575b5050509190925250508154600181810184556000938452602093849020835160059093020191825583830151908201556040820151600282015560608201518051929391926126929260038501920190614583565b50608082015180516126ae916004840191602090910190614609565b50505060a160020154609b60008282546126c89190614b82565b9091555050600060a181815560a282905560a3829055906126ea60a482614565565b6126f8600483016000614565565b505060a65461270990600190614b82565b6040517fa6e0490be65d6d4bce57d7b18ba16b514a5b039e85ed295305d1e9e63f557dec90611d4a9060a49060a590614c85565b600054610100900460ff161580801561275d5750600054600160ff909116105b806127775750303b158015612777575060005460ff166001145b612803576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610be9565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561286157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b609f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff851617905562093a80609e5560a082905560988290556128ba6137c4565b6128c560003361385d565b801561107057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611b3a565b6040516020016129659060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b60405160208183030381529060405280519060200120612984816132c0565b61299162093a8083614d50565b156129f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f737461727454696d6520252037206461797320213d20300000000000000000006044820152606401610be9565b42821015612a62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f544f4f204c4154450000000000000000000000000000000000000000000000006044820152606401610be9565b609f54612a879073ffffffffffffffffffffffffffffffffffffffff1633308661360e565b60008281526097602052604081208054859290612aa5908490614bd2565b9091555050604051838152829033907f11df96c8b9e61be6108e9001f87a321a1aa58b0fffbb02a3e5cb1a490de7f875906020015b60405180910390a3505050565b600082815260656020526040902060010154612b02816132c0565b61107083836133c1565b604051602001612b4d9060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b60405160208183030381529060405280519060200120612b6c816132c0565b42821015612bd6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f544f4f204c4154450000000000000000000000000000000000000000000000006044820152606401610be9565b60008281526097602052604081208054859290612bf4908490614b82565b9091555050609f546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810185905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90604401602060405180830381600087803b158015612c6b57600080fd5b505af1158015612c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca39190614d64565b50604051838152829033907fff16e0f040677e89c03a5b04dddd1656d379b6a72ce0faf921c47af7d285740490602001612ada565b600080609a54612ce6613867565b612cf09190614bd2565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260ae6020908152604091829020825180840190935280548084526001909101549183018290529293509091612d8790612d4485613974565b612d4e9190614b82565b73ffffffffffffffffffffffffffffffffffffffff87166000908152609c60205260409020546c0100000000000000000000000061353d565b612d919190614bd2565b949350505050565b60a254339015612e05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f4e204449564944454e440000000000000000000000000000000000000000006044820152606401610be9565b6000612e0f612f93565b9050612e1b8282613003565b612e248261308d565b6000612e2f33613739565b90506110703382613672565b604051602001612e7c9060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b6040516020818303038152906040528051906020012081565b612ec260405180608001604052806000815260200160008152602001600081526020016000151581525090565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260ac6020908152604080832085845290915290205460a9805482908110612f0757612f07614b24565b60009182526020918290206040805160808101825260049093029091018054835260018101549383019390935260028301549082015260039091015460ff161515606082015291505092915050565b60a98181548110612f6657600080fd5b60009182526020909120600490910201805460018201546002830154600390930154919350919060ff1684565b60985460009081612fa2613867565b9050612fad816139b6565b9050612fb881613974565b60998190559250428210612fcb57505090565b609d54612fd88342614b82565b612fe29190614d86565b609b6000828254612ff39190614bd2565b9091555050426098555090919050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260ae602052604090208054613071906130389084614b82565b73ffffffffffffffffffffffffffffffffffffffff85166000908152609c60205260409020546c0100000000000000000000000061353d565b8160010160008282546130849190614bd2565b90915550505550565b61309681613a03565b73ffffffffffffffffffffffffffffffffffffffff16600090815260a760205260409020429055565b600160a982815481106130d4576130d4614b24565b6000918252602080832060049290920290910160030180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169315159390931790925573ffffffffffffffffffffffffffffffffffffffff8416815260ab909152604081208054829061314790614dc3565b9182905550600083815260ad60205260409020549091508082146131ac5773ffffffffffffffffffffffffffffffffffffffff8416600090815260ac60209081526040808320858452825280832054848452818420819055835260ad90915290208190555b50600091825260ad6020908152604080842084905573ffffffffffffffffffffffffffffffffffffffff909416835260ac81528383209183525290812055565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526110709084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613e17565b6132ca8133613f23565b50565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661112457600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556133633390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561112457600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260a860209081526040808320868452825280832060010154938352609c909152902054806134c65750613536565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260a7602052604081205484516134f89190613ff5565b90508084602001511161350c575050613536565b8181856020015161351d9190614b82565b6135279190614d86565b6135319084614bd2565b925050505b9392505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415613595576000841161358a57600080fd5b508290049050613536565b8084116135a157600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201526064810182905261366c9085907f23b872dd000000000000000000000000000000000000000000000000000000009060840161323e565b50505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152609c6020526040812080548392906136a7908490614bd2565b9250508190555080609d60008282546136c09190614bd2565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316907febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a9060200160405180910390a25050565b60606135368383604051806060016040528060278152602001614ebd6027913961400c565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260ae6020908152604080832060010180549084905533845260af9092528220805491928392613785908490614bd2565b909155505060405181815233907f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d49060200160405180910390a2919050565b600054610100900460ff1661385b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610be9565b565b61112482826132cd565b6098546000904281111561387d57600091505090565b600061388c62093a8042614df8565b6138999062093a80614d86565b9050808210156139325760006138b262093a8084614df8565b6138bf9062093a80614d86565b9050805b8281101561392f5760006138da8262093a80614bd2565b905062093a806138ea8683614b82565b6000848152609760205260409020546139039190614d86565b61390d9190614df8565b6139179087614bd2565b9550935061392862093a8082614bd2565b90506138c3565b50505b62093a806139408342614b82565b6000838152609760205260409020546139599190614d86565b6139639190614df8565b61396d9084614bd2565b9250505090565b609954811580159061398857506000609d54115b156139b1576139a7826c01000000000000000000000000609d5461353d565b610a319082614bd2565b919050565b6000609d54600014156139e25781609a60008282546139d59190614bd2565b9091555060009392505050565b609a54156139ff57609a546139f79083614bd2565b6000609a5591505b5090565b73ffffffffffffffffffffffffffffffffffffffff81166000908152609c602052604090205480613a32575050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260a7602052604090205460a654613ac15781613a6a8242614b82565b613a749190614d86565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260a86020908152604080832083805290915281206001018054909190613ab7908490614bd2565b9091555050505050565b60a654600090613ad390600190614b82565b9050600060a68281548110613aea57613aea614b24565b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015613b8757602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311613b5c575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015613bdf57602002820191906000526020600020905b815481526020019060010190808311613bcb575b50505050508152505090506000613bfa826020015185613ff5565b613c049042614b82565b9050613c108582614d86565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260a86020526040812090613c41866001614bd2565b81526020019081526020016000206001016000828254613c619190614bd2565b90915550505b8382602001511115613e0f578151613c7f9085613ff5565b8260200151613c8e9190614b82565b9050613c9a8582614d86565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260a86020908152604080832087845290915281206001018054909190613cdd908490614bd2565b909155505082613cec57613e0f565b60a6613cf784614dc3565b93508381548110613d0a57613d0a614b24565b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015613da757602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311613d7c575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015613dff57602002820191906000526020600020905b815481526020019060010190808311613deb575b5050505050815250509150613c67565b505050505050565b6000613e79826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661412a9092919063ffffffff16565b8051909150156110705780806020019051810190613e979190614d64565b611070576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610be9565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661112457613f7b8173ffffffffffffffffffffffffffffffffffffffff166014614139565b613f86836020614139565b604051602001613f97929190614e0c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610be991600401614e8d565b6000818310156140055781613536565b5090919050565b606073ffffffffffffffffffffffffffffffffffffffff84163b6140b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610be9565b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516140da9190614ea0565b600060405180830381855af49150503d8060008114614115576040519150601f19603f3d011682016040523d82523d6000602084013e61411a565b606091505b509150915061353182828661437c565b6060612d9184846000856143cf565b60606000614148836002614d86565b614153906002614bd2565b67ffffffffffffffff81111561416b5761416b614bea565b6040519080825280601f01601f191660200182016040528015614195576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106141cc576141cc614b24565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061422f5761422f614b24565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061426b846002614d86565b614276906001614bd2565b90505b6001811115614313577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106142b7576142b7614b24565b1a60f81b8282815181106142cd576142cd614b24565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361430c81614dc3565b9050614279565b508315613536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610be9565b6060831561438b575081613536565b82511561439b5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be99190614e8d565b606082471015614461576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610be9565b73ffffffffffffffffffffffffffffffffffffffff85163b6144df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610be9565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516145089190614ea0565b60006040518083038185875af1925050503d8060008114614545576040519150601f19603f3d011682016040523d82523d6000602084013e61454a565b606091505b509150915061455a82828661437c565b979650505050505050565b50805460008255906000526020600020908101906132ca9190614644565b8280548282559060005260206000209081019282156145fd579160200282015b828111156145fd57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9091161782556020909201916001909101906145a3565b506139ff929150614644565b8280548282559060005260206000209081019282156145fd579160200282015b828111156145fd578251825591602001919060010190614629565b5b808211156139ff5760008155600101614645565b60006020828403121561466b57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461353657600080fd5b6000602082840312156146ad57600080fd5b5035919050565b600081518084526020808501945080840160005b838110156146fa57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016146c8565b509495945050505050565b600081518084526020808501945080840160005b838110156146fa57815187529582019590820190600101614719565b602081528151602082015260208201516040820152604082015160608201526000606083015160a0608084015261476f60c08401826146b4565b905060808401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08483030160a08501526147aa8282614705565b95945050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146139b157600080fd5b600080604083850312156147ea57600080fd5b823591506147fa602084016147b3565b90509250929050565b6000806040838503121561481657600080fd5b61481f836147b3565b946020939093013593505050565b60006060820185151583526020606081850152818651808452608086019150828801935060005b8181101561488657845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101614854565b50508481036040860152855180825290820192508186019060005b818110156148bd578251855293830193918301916001016148a1565b509298975050505050505050565b6000602082840312156148dd57600080fd5b613536826147b3565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015614989577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08984030185528151606081511515855288820151818a87015261495b828701826146b4565b915050878201519150848103888601526149758183614705565b96890196945050509086019060010161490d565b509098975050505050505050565b600080602083850312156149aa57600080fd5b823567ffffffffffffffff808211156149c257600080fd5b818501915085601f8301126149d657600080fd5b8135818111156149e557600080fd5b8660208260051b85010111156149fa57600080fd5b60209290920196919550909350505050565b60005b83811015614a27578181015183820152602001614a0f565b8381111561366c5750506000910152565b60008151808452614a50816020860160208601614a0c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614af5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452614ae3858351614a38565b94509285019290850190600101614aa9565b5092979650505050505050565b60008060408385031215614b1557600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015614b9457614b94614b53565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614bcb57614bcb614b53565b5060010190565b60008219821115614be557614be5614b53565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614c4e57600080fd5b83018035915067ffffffffffffffff821115614c6957600080fd5b602001915036819003821315614c7e57600080fd5b9250929050565b60006040820160408352808554808352606085019150600092508683526020808420845b83811015614cdb57815473ffffffffffffffffffffffffffffffffffffffff1685529382019360019182019101614ca9565b505085830381870152865480845287855281852093820192505b80851015614d1457835483526001948501949093019291810191614cf5565b5090979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082614d5f57614d5f614d21565b500690565b600060208284031215614d7657600080fd5b8151801515811461353657600080fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614dbe57614dbe614b53565b500290565b600081614dd257614dd2614b53565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600082614e0757614e07614d21565b500490565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614e44816017850160208801614a0c565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614e81816028840160208801614a0c565b01602801949350505050565b6020815260006135366020830184614a38565b60008251614eb2818460208701614a0c565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ec835d628bc01547823e80b0135c8a1027c5426f6c2c20376c30aa06950daf9464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositReward(uint256,uint256)": {
        "params": {
          "amount": "amount to deposit",
          "startTime": "The start time of distribution. should always satisfy UTC 00:00. (startTime % 604,800 == 0)"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accumulativeUserReward(address)": {
        "notice": "유저별 수령한 누적 리워드(STONE)"
      },
      "allocatedDividend(address,uint256)": {
        "notice": "주어진 배당 회차에 할당된 배당금액 계산"
      },
      "allocatedDividendAll(address)": {
        "notice": "이 때까지 받을 수 있는 모든 배당금 조회"
      },
      "balanceOf(address)": {
        "notice": "calculate the balance staked by owner"
      },
      "cancelReward(uint256,uint256)": {
        "notice": "Retrieve undistributed STONE"
      },
      "claimDividend(uint256)": {
        "notice": "배당금 수령하기"
      },
      "claimReward()": {
        "notice": "claim allocated STONE reward"
      },
      "claimableReward(address)": {
        "notice": "calculate claimable STONE reward"
      },
      "depositDividend(address,uint256)": {
        "notice": "배당금 납입하기"
      },
      "depositReward(uint256,uint256)": {
        "notice": "deposit the STONE to be distributed linearly for 1 week"
      },
      "dividendInfo(uint256)": {
        "notice": "배당금 정보"
      },
      "epochStartDate()": {
        "notice": "현 배당 기준 적용 시작 시간"
      },
      "executeDividend()": {
        "notice": "배당 집행하기"
      },
      "reStake()": {
        "notice": "Re-stake claimable Stone"
      },
      "readyDividendInfo()": {
        "notice": "배당 예정 정보"
      },
      "resetDividendRecordDate()": {
        "notice": "배당 기준시각 파기하기"
      },
      "setCooldownPeriod(uint256)": {
        "notice": "Sets period until un-staking requested amount is able to be withdrawn."
      },
      "setDividendRecordDate()": {
        "notice": "배당 기준시각 셋팅하기"
      },
      "stake(uint256)": {
        "notice": "Stakes Stone for msg.sender"
      },
      "totalDividendEpoch()": {
        "notice": "집행된 배당 횟수"
      },
      "totalSupply()": {
        "notice": "total stone staked"
      },
      "unstake(uint256)": {
        "notice": "request unstaking to msg.sender"
      },
      "unstakingRequestByIndex(address,uint256)": {
        "notice": "Get the information of un-staking requests by owner"
      },
      "unstakingRequestCounts(address)": {
        "notice": "Get the number of un-staking requests by owner"
      },
      "userDividendSnapshot(address,uint256)": {
        "notice": "user's dividend snapshot"
      },
      "withdraw(uint256)": {
        "notice": "withdraw unstaked Stone after cooldown"
      }
    },
    "notice": "StakedStone Contract created to distribute rewards to STONE holders [예치 프로세스] ============== StakedStone에 예치함으로써, STONE 홀더는 Pangeaswap에서 발생하는 수익들을 공유받을 수 있습니다. 유저가 예치한 자산을 빼려면 unstake을 호출 후, cooldown 기간이후에 withdraw할 수 있습니다. unstake 호출 후에는 유저는 claim할 수 없습니다. 1. Manager Side stake() => unstake() =====> withdraw() ---------- | cooldown | 기간 필요 - setCooldownPeriod(period) : unstake에서 withdraw까지의 기간을 지정. default : 7 days 소요 1. Holder Side - stake(amount) : amount만큼의 STONE을 예치 - unstake(amount) : 예치된 STONE에서 amount 만큼 인출 - unstakingRequestCounts(owner) : 현재 owner가 요청한 unstaking request 갯수 ( withdraw하면 줄어듦) - unstakingRequestByIndex(owner, index); : 요청한 unstaking 정보 조회 - withdraw(requestId) : cooldown 기간이 지난 unstaking request 호출해서 가져오기 [배당 프로세스] ============== `배당`은 비정기적으로 프로토콜 수익을 Holder들에게 환원하는 프로세스로, 유저의 예치량과 예치 기간에 비례하여 프로토콜 수익을 나누어 준다. 1. Manager Side 배당금 집행일 확정         배당금 납입                      배당금 집행 setDividendRecordDate() => depositDividend(token,amount) => executeDividend(); <= resetDividendRecordDate() : 집행전 배당금 취소; - 집행시각 기준으로 account 별 지분율을 산출한다. - 배당금이 납입되어야, 집행이 진행된다. - 납입된 배당금은 전액 해당 배당금 분배에 사용된다. - 집행 전까지 언제든 resetDividendRecordDate을 호출할 수 있으며, 납입된 배당금은 회수처리된다. (msg.sender로) 2. Holder Side - allocatedDividend(epoch) : 해당 epoch에서 받을 수 있는 배당금 토큰 조회 - claimDividend(epoch) : 해당 epoch에 배치된 배당금을 수령 [리워드 프로세스] ================ `리워드`는 매주 배치되어 있는 거버넌스 토큰을 예치한 홀더에게 제공하는 프로세스로, 매 블럭마다 선형적으로 분배된다. 1. Manager Side - depositReward(amount, startTime) : 리워드 납입 (startTime에서 부터 1주일간 분배) - cancelReward(amount, startTime) : 분배되지 않은 주차의 리워드 회수 2. Holder Side - claimableReward(owner) : 현재 받을 수 있는 리워드 량 조회 - claimReward() : 리워드 수령",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 419,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 422,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 847,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1117,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4144,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "totalRewardPerWeek",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4146,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "checkpoint",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 4148,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "rewardGrowthGlobalLast",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 4150,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "pendingReward",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 4152,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "totalShare",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 4156,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "_balanceOf",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4158,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 4160,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "cooldownPeriod",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 4162,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "stone",
        "offset": 0,
        "slot": "159",
        "type": "t_address"
      },
      {
        "astId": 4164,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "openDate",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 4167,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "readyDividend",
        "offset": 0,
        "slot": "161",
        "type": "t_struct(Dividend)6152_storage"
      },
      {
        "astId": 4171,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "_dividendHistory",
        "offset": 0,
        "slot": "166",
        "type": "t_array(t_struct(Dividend)6152_storage)dyn_storage"
      },
      {
        "astId": 4175,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "_userLastRecordDate",
        "offset": 0,
        "slot": "167",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4182,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "_userDividendSnapshot",
        "offset": 0,
        "slot": "168",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(DividendSnapshot)6157_storage))"
      },
      {
        "astId": 4186,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "unstakingRequests",
        "offset": 0,
        "slot": "169",
        "type": "t_array(t_struct(UnstakingRequest)6134_storage)dyn_storage"
      },
      {
        "astId": 4190,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "requestOwnerOf",
        "offset": 0,
        "slot": "170",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4195,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "unstakingRequestCounts",
        "offset": 0,
        "slot": "171",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4201,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "_ownedRequests",
        "offset": 0,
        "slot": "172",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4205,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "_ownedRequestsIndex",
        "offset": 0,
        "slot": "173",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4210,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "_userRewardSnapshot",
        "offset": 0,
        "slot": "174",
        "type": "t_mapping(t_address,t_struct(RewardSnapshot)6139_storage)"
      },
      {
        "astId": 4215,
        "contract": "contracts/StakedStone.sol:StakedStone",
        "label": "accumulativeUserReward",
        "offset": 0,
        "slot": "175",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Dividend)6152_storage)dyn_storage": {
        "base": "t_struct(Dividend)6152_storage",
        "encoding": "dynamic_array",
        "label": "struct IStakedStoneStruct.Dividend[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(UnstakingRequest)6134_storage)dyn_storage": {
        "base": "t_struct(UnstakingRequest)6134_storage",
        "encoding": "dynamic_array",
        "label": "struct IStakedStoneStruct.UnstakingRequest[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(DividendSnapshot)6157_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct IStakedStoneStruct.DividendSnapshot))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(DividendSnapshot)6157_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(RewardSnapshot)6139_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStakedStoneStruct.RewardSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardSnapshot)6139_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(DividendSnapshot)6157_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IStakedStoneStruct.DividendSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(DividendSnapshot)6157_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Dividend)6152_storage": {
        "encoding": "inplace",
        "label": "struct IStakedStoneStruct.Dividend",
        "members": [
          {
            "astId": 6141,
            "contract": "contracts/StakedStone.sol:StakedStone",
            "label": "startDate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6143,
            "contract": "contracts/StakedStone.sol:StakedStone",
            "label": "recordDate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6145,
            "contract": "contracts/StakedStone.sol:StakedStone",
            "label": "totalShare",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6148,
            "contract": "contracts/StakedStone.sol:StakedStone",
            "label": "tokens",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 6151,
            "contract": "contracts/StakedStone.sol:StakedStone",
            "label": "amounts",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(DividendSnapshot)6157_storage": {
        "encoding": "inplace",
        "label": "struct IStakedStoneStruct.DividendSnapshot",
        "members": [
          {
            "astId": 6154,
            "contract": "contracts/StakedStone.sol:StakedStone",
            "label": "isPaid",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6156,
            "contract": "contracts/StakedStone.sol:StakedStone",
            "label": "share",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RewardSnapshot)6139_storage": {
        "encoding": "inplace",
        "label": "struct IStakedStoneStruct.RewardSnapshot",
        "members": [
          {
            "astId": 6136,
            "contract": "contracts/StakedStone.sol:StakedStone",
            "label": "_growthGlobalLast",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6138,
            "contract": "contracts/StakedStone.sol:StakedStone",
            "label": "_owed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/StakedStone.sol:StakedStone",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/StakedStone.sol:StakedStone",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UnstakingRequest)6134_storage": {
        "encoding": "inplace",
        "label": "struct IStakedStoneStruct.UnstakingRequest",
        "members": [
          {
            "astId": 6127,
            "contract": "contracts/StakedStone.sol:StakedStone",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6129,
            "contract": "contracts/StakedStone.sol:StakedStone",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6131,
            "contract": "contracts/StakedStone.sol:StakedStone",
            "label": "requestTs",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6133,
            "contract": "contracts/StakedStone.sol:StakedStone",
            "label": "isClaimed",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}