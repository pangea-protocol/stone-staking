{
  "address": "0xf951e7c84dAde86Fb95894B6B200f157d599D98B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Collect",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fund",
          "type": "address"
        }
      ],
      "name": "SetDaoFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "SetFactoryGrowthFundRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fund",
          "type": "address"
        }
      ],
      "name": "SetGrowthFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "SetGrowthFundRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SetMinimumRevenue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SetRevenueToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "skip",
          "type": "bool"
        }
      ],
      "name": "SetSkipCollect",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "revenueToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "output",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "growthFundShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daoFundShare",
          "type": "uint256"
        }
      ],
      "name": "Share",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "broker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        }
      ],
      "name": "VerifyBroker",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OP_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        }
      ],
      "name": "allocateRevenue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "growthFundShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daoFundShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "collectByPage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "collectFeeCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "collectFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "feeTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "getGrowthFundRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "growthFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masterDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_revenueToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wklay",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isVerifiedBroker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumRevenue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revenueToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "broker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "ok",
          "type": "bool"
        }
      ],
      "name": "setApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fund",
          "type": "address"
        }
      ],
      "name": "setDaoFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "setFactoryGrowthFundRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fund",
          "type": "address"
        }
      ],
      "name": "setGrowthFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "setGrowthFundRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setMinimumRevenue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setRevenueToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "skip",
          "type": "bool"
        }
      ],
      "name": "setSkipCollect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minimumOutput",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "broker",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "share",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "skipCollect",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFeeTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "broker",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        }
      ],
      "name": "verifyBroker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wklay",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe62594a1dabcfe14670e0608f65d0c8c841cc60284ca1628f6c93d319e15c71f",
  "receipt": {
    "to": null,
    "from": "0x2A2F23ff33671361010D357529BDF0adca9416Fc",
    "contractAddress": "0xf951e7c84dAde86Fb95894B6B200f157d599D98B",
    "transactionIndex": 12,
    "gasUsed": "5430823",
    "logsBloom": "0x
    "blockHash": "0x173e5b2e5500efe0364b6b961442517172351e5880b1c4c343a7857c010b445a",
    "transactionHash": "0xe62594a1dabcfe14670e0608f65d0c8c841cc60284ca1628f6c93d319e15c71f",
    "logs": [],
    "blockNumber": 110218173,
    "cumulativeGasUsed": "11789717",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "2eb17f8f20804e04638c76af8440916b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fund\",\"type\":\"address\"}],\"name\":\"SetDaoFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"SetFactoryGrowthFundRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fund\",\"type\":\"address\"}],\"name\":\"SetGrowthFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"SetGrowthFundRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetMinimumRevenue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SetRevenueToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"skip\",\"type\":\"bool\"}],\"name\":\"SetSkipCollect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revenueToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"growthFundShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daoFundShare\",\"type\":\"uint256\"}],\"name\":\"Share\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"broker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"name\":\"VerifyBroker\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OP_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"name\":\"allocateRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"growthFundShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoFundShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"collectByPage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"collectFeeCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"collectFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"feeTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getGrowthFundRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"growthFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_revenueToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wklay\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVerifiedBroker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"broker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"name\":\"setApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fund\",\"type\":\"address\"}],\"name\":\"setDaoFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setFactoryGrowthFundRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fund\",\"type\":\"address\"}],\"name\":\"setGrowthFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setGrowthFundRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinimumRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setRevenueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"skip\",\"type\":\"bool\"}],\"name\":\"setSkipCollect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumOutput\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"broker\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"share\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"skipCollect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"broker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"name\":\"verifyBroker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wklay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allocateRevenue(address)\":{\"notice\":\"\\ud2b9\\uc815 \\ud1a0\\ud070\\uc5d0 \\ub300\\ud55c Revenue \\ube44\\uc728 \\ud30c\\uc545\"},\"collectByPage(uint256,uint256)\":{\"notice\":\"deployer\\uc5d0\\uc11c \\uc21c\\ud68c\\ud558\\uba70, \\uc218\\uc218\\ub8cc \\uc218\\ucde8 \\ud638\\ucd9c\"},\"collectFeeCallback(address[],uint256[])\":{\"notice\":\"Callback \\ud568\\uc218 (Pool\\uc5d0\\uc11c \\ud638\\ucd9c)\"},\"collectFrom(address)\":{\"notice\":\"\\ud2b9\\uc815 \\ud480\\uc5d0\\uc11c \\ud504\\ub85c\\ud1a0\\ucf5c \\uc218\\uc775 \\ubaa8\\uc73c\\uae30\"}},\"notice\":\"\\ud310\\uac8c\\uc544\\uc2a4\\uc651 \\ud504\\ub85c\\ud1a0\\ucf5c \\uc218\\uc218\\ub8cc \\ubd84\\ubc30\\ub97c \\ub2f4\\ub2f9\\ud558\\ub294 \\ucee8\\ud2b8\\ub799\\ud2b8\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolRevenueShare.sol\":\"ProtocolRevenueShare\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x35e30a35e23f856cbcee3558b7efdd83f6017a8f1b419710645143d98e892463\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"contracts/ProtocolRevenueShare.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport \\\"./interfaces/IProtocolFeePool.sol\\\";\\nimport \\\"./interfaces/IMasterDeployer.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./libraries/FullMath.sol\\\";\\nimport \\\"./interfaces/IProtocolRevenueShare.sol\\\";\\n\\n\\n/**\\n *\\n * \\ud310\\uac8c\\uc544\\uc2a4\\uc651 \\ud504\\ub85c\\ud1a0\\ucf5c \\uc815\\uc0b0\\n *\\n * 2 \\ub2e8\\uacc4\\ub85c \\ub098\\ub258\\uc5b4 \\ud638\\ucd9c\\ub429\\ub2c8\\ub2e4. \\uc8fc\\uae30\\uc801\\uc73c\\ub85c \\ud480\\uc5d0\\uc11c \\uc218\\uc218\\ub8cc \\ud1a0\\ud070\\ub4e4\\uc744 \\uc218\\ucde8\\ud55c \\ud6c4,\\n * revenueToken\\uc73c\\ub85c \\uc77c\\uad04\\uc801\\uc73c\\ub85c \\uc2a4\\uc651\\ud558\\uc5ec, GrowthFund\\uc640 DaoFund\\ub85c \\ubd84\\ubc30\\ud569\\ub2c8\\ub2e4.\\n *\\n * 1. \\uac01 \\ud480 \\ubcc4 \\uc218\\uc218\\ub8cc \\uc218\\ucde8\\n *\\n *    ````solidity\\n *    function collectByPage(uint256 start, uint256 limit) external;\\n *    ````\\n *\\n *    * masterDeployer\\uc5d0 \\ub4f1\\ub85d\\ub41c \\ud310\\uac8c\\uc544\\uc2a4\\uc651\\uc758 \\ubaa8\\ub4e0 \\ud480\\ub4e4\\uc744 \\uc21c\\ud68c\\ud558\\uba70 \\ud638\\ucd9c\\n *    * `collectFrom(pool)`\\uc744 \\ud638\\ucd9c\\ud558\\uc5ec protocol \\uc218\\uc218\\ub8cc \\uc218\\ucde8\\n *    * \\uc0ac\\uc804\\uc5d0 masterDeployer\\uc5d0\\uc11c protocolFeeTo\\ub97c \\ubcc0\\uacbd\\n *\\n * 2. revenueToken\\uc73c\\ub85c \\uc2a4\\uc651 \\ud6c4 GrowthFund\\uc640 DaoFund\\ub85c \\ubd84\\ubc30\\n *\\n *    ````solidity\\n *    function share(address feeToken, uint256 minimumOutput, address payable broker, bytes calldata data) external;\\n *    ````\\n *\\n *    `growthFund`\\uc5d0 \\ud560\\ub2f9\\ub420 \\ube44\\uc728\\n *     [1] \\ud480 \\ubcc4 growthFundRate\\uac00 \\uc9c0\\uc815\\ub418\\uc5b4 \\uc788\\ub294 \\uacbd\\uc6b0\\uc5d0\\ub294 \\uc4f0\\uace0,\\n *     [2] \\uc544\\ub2cc \\uacbd\\uc6b0\\uc5d0\\ub294 \\ud329\\ud1a0\\ub9ac \\ubcc4 growthFundRate\\ub97c \\uc0ac\\uc6a9\\n *\\n * ------------------------------------------------------------------------------------\\n *\\n * Growth Fund\\ub780?\\n *\\n * \\ud310\\uac8c\\uc544 \\uc2a4\\uc651\\uc758 \\uc131\\uc7a5\\uc744 \\uc704\\ud574 \\uc0ac\\uc6a9\\ud558\\ub294 \\ubaa9\\uc801\\uc758 \\uc790\\uae08\\uc73c\\ub85c,\\n * \\uc8fc\\uc694 \\uc6a9\\ucc98\\ub294 \\ud310\\uac8c\\uc544 \\uc2a4\\uc651\\uc758 TVL, Trading Volume\\uc744 \\ub9cc\\ub4e4\\uc5b4 \\uc904 \\uc218 \\uc788\\ub294 \\ud30c\\ud2b8\\ub108 \\ud504\\ub85c\\ud1a0\\ucf5c\\uacfc\\uc758 \\ud611\\uc5c5\\uc744 \\uc704\\ud55c \\uc790\\uae08,\\n * \\ud310\\uac8c\\uc544 \\uc2a4\\uc651\\uc758 \\uae30\\ub2a5 \\uac1c\\uc120 \\ub4f1\\uc744 \\uc2dc\\ud589\\ud560 \\uc218 \\uc788\\ub294 \\uc678\\ubd80 Contributor\\uc5d0 \\ub300\\ud55c Grant \\ub4f1\\uc73c\\ub85c \\uc0ac\\uc6a9\\n *\\n *\\n */\\n/// @notice \\ud310\\uac8c\\uc544\\uc2a4\\uc651 \\ud504\\ub85c\\ud1a0\\ucf5c \\uc218\\uc218\\ub8cc \\ubd84\\ubc30\\ub97c \\ub2f4\\ub2f9\\ud558\\ub294 \\ucee8\\ud2b8\\ub799\\ud2b8\\ncontract ProtocolRevenueShare\\n    is IProtocolRevenueShare, AccessControlUpgradeable, Multicall {\\n    using SafeERC20 for IERC20;\\n\\n    // @notice swapAndShare / collectByPage(uint256 start, uint256 limit)\\n    bytes32 public constant OP_ROLE = keccak256(abi.encode(\\\"OP\\\"));\\n    bytes32 public constant MANAGER_ROLE = keccak256(abi.encode(\\\"MANAGER\\\"));\\n    uint256 private constant BIPS = 10000;\\n\\n    // @notice Pangeaswap MasterDeployer contracts\\n    address public masterDeployer;\\n\\n    // @notice \\ubaa8\\ub4e0 \\uc218\\uc775\\uc740 revenueToken(usdt)\\ub85c \\ubc14\\ub00c\\uc5b4 \\uc81c\\uacf5\\n    address public revenueToken;\\n\\n    // @notice \\uc815\\uc0b0 \\uc2dc \\ucd5c\\uc18c revenueToken \\uac2f\\uc218\\n    uint256 public minimumRevenue;\\n\\n    // @notice wrapped KLAY\\n    address public wklay;\\n\\n    // @notice Growth Fund address\\n    address public growthFund;\\n\\n    // @notice DAO Fund address\\n    address public daoFund;\\n\\n    // @notice \\ud480 \\ubcc4 Growth Fund\\uc5d0 \\ud560\\ub2f9\\ub420 \\ubb3c\\ub7c9 \\ube44\\uc728 (unit: bips, 10^4)\\n    mapping(address => uint256) private _growthFundRate;\\n\\n    // @notice Growth Fund\\uc5d0 \\ud560\\ub2f9\\ub420 \\ubb3c\\ub7c9 \\ube44\\uc728 \\uc874\\uc7ac \\uc5ec\\ubd80\\n    mapping(address => bool) private _setupGrowthFundRate;\\n\\n    // @notice \\ud329\\ud1a0\\ub9ac \\ubcc4 Growth Fund\\uc5d0 \\ud560\\ub2f9\\ub420 \\ubb3c\\ub7c9 \\ube44\\uc728 (uint: bips, 10^4)\\n    mapping(address => uint256) private _factoryGrowthFundRate;\\n\\n    // @notice \\ud329\\ud1a0\\ub9ac \\ubcc4 Growth Fund\\uc5d0 \\ud560\\ub2f9\\ub420 \\ubb3c\\ub7c9  \\ube44\\uc728 \\uc874\\uc7ac \\uc5ec\\ubd80\\n    mapping(address => bool) private _setupFactoryGrowthFundRate;\\n\\n    // @notice Growth Fund \\ud560\\ub2f9\\ub7c9 (BIPS\\uac00 \\uacf1\\ud574\\uc838 \\uc788\\uc74c)\\n    mapping(address => uint256) private _allocatedGrowthFunds;\\n\\n    // @notice Fee Token\\uc744 Revenue \\ud1a0\\ud070\\uc73c\\ub85c \\ubc14\\uafc0 \\uc218 \\uc788\\ub294 \\uc911\\uac1c\\uc778\\uc778\\uc9c0 \\uc5ec\\ubd80 ( pangeaswap PoolRouter, Dex Aggregators...)\\n    mapping(address => bool) public isVerifiedBroker;\\n\\n    address private cachedPool;\\n\\n    address[] private _feeTokens;\\n    mapping(address => bool) private isFee;\\n\\n    // @notice \\uc218\\uc218\\ub8cc \\uc218\\ucde8\\ub97c \\uc2a4\\ud0b5\\ud558\\ub294 \\ud480 \\uc5ec\\ubd80\\n    mapping(address => bool) public skipCollect;\\n\\n    function initialize(\\n        address _masterDeployer,\\n        address _revenueToken,\\n        address _wklay\\n    ) external initializer {\\n        require(_masterDeployer != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(_revenueToken != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(_wklay != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        masterDeployer = _masterDeployer;\\n        revenueToken = _revenueToken;\\n        wklay = _wklay;\\n\\n        minimumRevenue = 1_000_000;\\n\\n        __AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    // @notice receive klay\\n    receive() external payable {\\n    }\\n\\n    //////////////////////////////////////////\\n    // MANAGER FUNCTION\\n    //////////////////////////////////////////\\n    // @notice set revenueToken, only manager can update\\n    function setRevenueToken(address _token) external onlyRole(MANAGER_ROLE) {\\n        require(_token != address(0), \\\"NOT_ZERO\\\");\\n        revenueToken = _token;\\n\\n        emit SetRevenueToken(_token);\\n    }\\n\\n    // @notice set growthFund, only manager can update\\n    function setGrowthFund(address _fund) external onlyRole(MANAGER_ROLE) {\\n        require(_fund != address(0), \\\"NOT_ZERO\\\");\\n        growthFund = _fund;\\n\\n        emit SetGrowthFund(_fund);\\n    }\\n\\n    // @notice set daoFund, only manager can update\\n    function setDaoFund(address _fund) external onlyRole(MANAGER_ROLE) {\\n        require(_fund != address(0), \\\"NOT_ZERO\\\");\\n        daoFund = _fund;\\n\\n        emit SetDaoFund(_fund);\\n    }\\n\\n    // @notice set MinimumRevenue, only manager can update\\n    function setMinimumRevenue(uint256 amount) external onlyRole(MANAGER_ROLE) {\\n        require(amount > 0, \\\"NOT_ZERO\\\");\\n        minimumRevenue = amount;\\n\\n        emit SetMinimumRevenue(amount);\\n    }\\n\\n    // @notice \\ud480 \\ubcc4 \\ud504\\ub85c\\ud1a0\\ucf5c \\uc218\\uc775 \\uc911 growth fund\\uc5d0 \\ud560\\ub2f9\\ud560 \\ube44\\uc728\\n    function setGrowthFundRate(address _pool, uint256 _rate) external onlyRole(MANAGER_ROLE) {\\n        require(_pool != address(0), \\\"NOT_ZERO\\\");\\n        require(_rate <= BIPS, \\\"TOO_BIG\\\");\\n\\n        _growthFundRate[_pool] = _rate;\\n        _setupGrowthFundRate[_pool] = true;\\n\\n        emit SetGrowthFundRate(_pool, _rate);\\n    }\\n\\n    // @notice \\ud329\\ud1a0\\ub9ac \\ubcc4 \\ud504\\ub85c\\ud1a0\\ucf5c \\uc218\\uc775 \\uc911 growth fund\\uc5d0 \\ud560\\ub2f9\\ud560 \\uae30\\ubcf8 \\ube44\\uc728, \\ud480 \\ubcc4 growthFundRate\\uac00 \\ubbf8\\uc9c0\\uc815\\uc778 \\uacbd\\uc6b0 \\uc774\\uc6a9\\n    function setFactoryGrowthFundRate(address _factory, uint256 _rate) external onlyRole(MANAGER_ROLE) {\\n        require(_factory != address(0), \\\"NOT_ZERO\\\");\\n        require(_rate <= BIPS, \\\"TOO_BIG\\\");\\n\\n        _factoryGrowthFundRate[_factory] = _rate;\\n        _setupFactoryGrowthFundRate[_factory] = true;\\n\\n        emit SetFactoryGrowthFundRate(_factory, _rate);\\n    }\\n\\n    // @notice Fee \\ud1a0\\ud070\\uc744 Revenue \\ud1a0\\ud070\\uc73c\\ub85c \\uc2a4\\uc651\\uc744 \\uc911\\uac1c\\ud560 \\uc218 \\uc788\\ub294 \\ube0c\\ub85c\\ucee4\\ub85c \\ud5c8\\uc6a9\\ud560 \\uac83\\uc778\\uc9c0 \\uc5ec\\ubd80\\n    function verifyBroker(address broker, bool isVerified) external onlyRole(MANAGER_ROLE) {\\n        require(broker != address(0), \\\"NOT_ZERO\\\");\\n        isVerifiedBroker[broker] = isVerified;\\n\\n        emit VerifyBroker(broker, isVerified);\\n    }\\n\\n    // @notice Broker\\uc5d0\\uac8c feeToken\\uc5d0 \\ub300\\ud574 Approval\\uc744 \\ubbf8\\ub9ac \\uc81c\\uacf5\\n    // @dev \\ud2b9\\uc815 \\ube0c\\ub85c\\ucee4\\uc758 \\uacbd\\uc6b0\\uc5d0\\ub294 approve \\ud68d\\ub4dd \\uc804\\uc5d0\\ub294 \\uacbd\\ub85c\\ub97c \\uc81c\\uacf5\\ud558\\uc9c0 \\uc54a\\uae30 \\ub54c\\ubb38\\uc5d0 \\uad6c\\uc131\\n    function setApproval(address broker, address feeToken, bool ok) external onlyRole(OP_ROLE) {\\n        require(isVerifiedBroker[broker], \\\"NOT_VERIFED\\\");\\n        if (ok) {\\n            IERC20(feeToken).approve(broker, type(uint256).max);\\n        } else {\\n            IERC20(feeToken).approve(broker, 0);\\n        }\\n    }\\n\\n    // @notice \\ud574\\ub2f9 \\ud480\\uc5d0\\uc11c \\uc218\\uc218\\ub8cc \\uc218\\ucde8 \\uc9d5\\uc218 \\uacfc\\uc815\\uc744 \\uc2a4\\ud0b5\\ud560 \\ub584 \\uc774\\uc6a9\\n    // @dev \\uc784\\uc758\\uc758 \\ud1a0\\ud070\\uc744 \\ub9cc\\ub4e4\\uace0 swap pool\\uc744 \\uad6c\\uc131\\ud558\\ub294 \\ud1a0\\ud070 \\uc911 \\ud558\\ub098\\ub85c \\ub9cc\\ub4e4 \\uacbd\\uc6b0 fee\\uac00 collect\\ub420 \\ub54c\\n    //      \\uc784\\uc758\\uc758 \\ud1a0\\ud070 \\ub0b4 transfer \\ud568\\uc218\\uc5d0\\uc11c to\\uac00 fee\\ub97c collect\\ud558\\ub294 contract\\uc77c \\uacbd\\uc6b0 revert\\ud568\\uc73c\\ub85c\\uc368\\n    //      \\uc218\\uc218\\ub8cc \\uc9d5\\uc218\\ub97c \\ucc28\\ub2e8\\ud560 \\uc218 \\uc788\\uc2b5\\ub2c8\\ub2e4\\n    function setSkipCollect(address pool, bool skip) external onlyRole(MANAGER_ROLE) {\\n        IMasterDeployer deployer = IMasterDeployer(masterDeployer);\\n        require(deployer.pools(pool), \\\"NOT POOL\\\");\\n        skipCollect[pool] = skip;\\n\\n        emit SetSkipCollect(pool, skip);\\n    }\\n\\n    // @notice Growth Fund\\uc5d0 \\ud560\\uc560\\ud560 \\ube44\\uc911 \\uacc4\\uc0b0\\n    function getGrowthFundRate(address _pool) public view returns (uint256 rate) {\\n        if (_setupGrowthFundRate[_pool]) {\\n            return _growthFundRate[_pool];\\n        } else {\\n            // @dev \\ud480 \\ubcc4 growth fund rate\\uac00 \\ubbf8\\uc9c0\\uc815\\ub418\\uc5b4 \\uc788\\uc73c\\uba74, factory\\uc758 growth fund rate\\ub97c \\uc9c0\\uc815\\n            address factory = IMasterDeployer(masterDeployer).getFactoryAddress(_pool);\\n            require(_setupFactoryGrowthFundRate[factory], \\\"NOT_SETUP\\\");\\n            return _factoryGrowthFundRate[factory];\\n        }\\n    }\\n\\n    /// @notice \\ud2b9\\uc815 \\ud1a0\\ud070\\uc5d0 \\ub300\\ud55c Revenue \\ube44\\uc728 \\ud30c\\uc545\\n    function allocateRevenue(address feeToken) external view returns (uint256 amount, uint256 growthFundShare, uint256 daoFundShare) {\\n        amount = IERC20(feeToken).balanceOf(address(this));\\n        growthFundShare = FullMath.mulDiv(amount, _allocatedGrowthFunds[feeToken], amount * BIPS);\\n        daoFundShare = amount - growthFundShare;\\n    }\\n\\n    function totalFeeTokens() external view returns (uint256) {\\n        return _feeTokens.length;\\n    }\\n\\n    function feeTokens(uint256 start, uint256 end) external view returns (address[] memory tokens){\\n        tokens = new address[](end - start);\\n\\n        end = Math.min(end, _feeTokens.length);\\n        for (uint256 i = start; i< end; i++) {\\n            tokens[i]  = _feeTokens[i];\\n        }\\n    }\\n\\n    /// @notice deployer\\uc5d0\\uc11c \\uc21c\\ud68c\\ud558\\uba70, \\uc218\\uc218\\ub8cc \\uc218\\ucde8 \\ud638\\ucd9c\\n    function collectByPage(uint256 start, uint256 limit) external onlyRole(OP_ROLE) {\\n        IMasterDeployer deployer = IMasterDeployer(masterDeployer);\\n\\n        uint256 end = Math.min(deployer.totalPoolsCount(), start + limit);\\n        if (start >= end) return;\\n\\n        for (uint256 i = start; i < end; i++) {\\n            address pool = deployer.getPoolAddress(i);\\n            // @dev skipCollect \\ub300\\uc0c1\\uc758 \\ud480\\uc778 \\uacbd\\uc6b0, collectByPage\\uc5d0\\uc11c \\uc2a4\\ud0b5\\n            if (skipCollect[pool]) continue;\\n\\n            (uint128 rev0, uint128 rev1) = IProtocolFeePool(pool).getTokenProtocolFees();\\n\\n            // @dev \\ud504\\ub85c\\ud1a0\\ucf5c \\uc218\\uc775\\uc774 \\uc874\\uc7ac\\ud558\\uc9c0 \\uc54a\\uc740 \\uacbd\\uc6b0 \\uc2a4\\ud0b5\\n            if (rev0 == 0 && rev1 == 0) continue;\\n\\n            cachedPool = pool;\\n            IProtocolFeePool(pool).collectProtocolFee();\\n        }\\n\\n        cachedPool = address(0);\\n    }\\n\\n    /// @notice \\ud2b9\\uc815 \\ud480\\uc5d0\\uc11c \\ud504\\ub85c\\ud1a0\\ucf5c \\uc218\\uc775 \\ubaa8\\uc73c\\uae30\\n    function collectFrom(address pool) external onlyRole(OP_ROLE) {\\n        cachedPool = pool;\\n        if (skipCollect[pool]) return;\\n\\n        IProtocolFeePool(pool).collectProtocolFee();\\n        cachedPool = address(0);\\n    }\\n\\n    // @notice \\ud480\\uc5d0\\uc11c \\ubc1c\\uc0dd\\ud55c \\uc218\\uc775\\uc744 \\uc2a4\\uc651 \\ud6c4, Growth Fund\\uc640 Dao Fund\\ub85c \\ubd84\\ubc30\\n    // @param feeToken \\ud504\\ub85c\\ud1a0\\ucf5c\\uc5d0\\uc11c \\ubc1c\\uc0dd\\ud55c \\uc218\\uc775 \\ud1a0\\ud070\\n    // @param minimumOutput \\uc2a4\\uc651\\ud560 \\uacbd\\uc6b0, \\uc2ac\\ub9ac\\ud53c\\uc9c0\\ub97c \\uace0\\ub824\\ud55c output\\n    // @param broker feeToken\\uc744 revenueToken\\uc73c\\ub85c \\uc804\\ud658\\uc744 \\uc218\\ud589\\ud558\\ub294 \\ucee8\\ud2b8\\ub799\\ud2b8 ( pangeaswap pool Router, swap Scanner, 1inch, ...)\\n    // @param data broker \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c\\uc758 \\ucf5c\\ubc31 \\ub370\\uc774\\ud130\\n    function share(\\n        address feeToken,\\n        uint256 minimumOutput,\\n        address payable broker,\\n        bytes calldata data\\n    ) external onlyRole(OP_ROLE) {\\n        // 1. collect\\ub41c protocol revenue\\ub97c \\uac00\\uc838\\uc624\\uae30\\n        uint256 amount = IERC20(feeToken).balanceOf(address(this));\\n\\n        // 2. revenueToken\\uc73c\\ub85c \\uc804\\ud658 (feeToken == revenueToken\\uc778 \\uacbd\\uc6b0 \\uc2a4\\ud0b5)\\n        uint256 output = swapToRevenueToken(feeToken, amount, minimumOutput, broker, data);\\n\\n        // 3. Fund \\ubcc4 \\uc9c0\\ubd84 \\ubd84\\ub9ac\\n        (uint256 growthFundShare, uint256 daoFundShare) = settleFundShare(feeToken, amount, output);\\n\\n        // 4. \\uac01 \\ud380\\ub4dc\\ub85c \\uc790\\uc0b0 \\uc804\\uc1a1\\n        IERC20 revenue = IERC20(revenueToken);\\n        if (growthFundShare > 0) revenue.safeTransfer(growthFund, growthFundShare);\\n        if (daoFundShare > 0) revenue.safeTransfer(daoFund, daoFundShare);\\n\\n        // 5. \\uc774\\ubca4\\ud2b8 \\ubc1c\\ud589\\n        emit Share(feeToken, address(revenue), amount, output, growthFundShare, daoFundShare);\\n    }\\n\\n    // @notice fund \\ud560\\ub2f9\\ub7c9 \\ub098\\ub204\\uae30\\n    function settleFundShare(address feeToken, uint256 total, uint256 amount) internal returns (uint256 growthFundShare, uint256 daoFundShare) {\\n        growthFundShare = FullMath.mulDiv(amount, _allocatedGrowthFunds[feeToken], total * BIPS);\\n        _allocatedGrowthFunds[feeToken] = 0;\\n        daoFundShare = amount > growthFundShare ? amount - growthFundShare : 0;\\n    }\\n\\n    function swapToRevenueToken(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumOutput,\\n        address payable broker,\\n        bytes calldata data\\n    ) internal returns (uint256 output) {\\n        IWETH weth = IWETH(wklay);\\n        IERC20 revenue = IERC20(revenueToken);\\n\\n        // @dev revenue \\ud1a0\\ud070\\uacfc \\ub3d9\\uc77c\\ud55c \\uacbd\\uc6b0\\uc5d0\\ub294 \\uc2a4\\uc651 \\uc2a4\\ud0b5\\n        if (token == address(revenue)) return amount;\\n\\n        uint256 prevAmount = revenue.balanceOf(address(this));\\n\\n        require(isVerifiedBroker[broker], \\\"NOT_VERIFIED_BROKER\\\");\\n        {\\n            bool success;\\n            if (address(weth) == token) {\\n                // unwrap first\\n                weth.withdraw(amount);\\n                (success, ) = broker.call{value: amount}(data);\\n            } else {\\n                // approve first\\n                if (amount > IERC20(token).allowance(address(this),broker)) {\\n                    IERC20(token).approve(broker, amount);\\n                }\\n                (success, ) = broker.call(data);\\n            }\\n            require(success, \\\"BROKER_FAIL\\\");\\n        }\\n\\n        output = revenue.balanceOf(address(this)) - prevAmount;\\n        require(output >= minimumOutput, \\\"SLIPPAGE\\\");\\n        require(output >= minimumRevenue, \\\"MINIMUM REVENUE\\\");\\n    }\\n\\n\\n    /// @notice Callback \\ud568\\uc218 (Pool\\uc5d0\\uc11c \\ud638\\ucd9c)\\n    function collectFeeCallback(address[] memory tokens, uint256[] memory amounts) external {\\n        address _pool = _msgSender();\\n        require(cachedPool == _pool, \\\"NOT ALLOWED\\\");\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address token = tokens[i];\\n            uint256 amount = amounts[i];\\n\\n            // @dev skip if amount == 0\\n            if (amount == 0) continue;\\n\\n            // @dev feeToken \\ub4f1\\ub85d\\n            if (!isFee[token]) {\\n                _feeTokens.push(token);\\n                isFee[token] = true;\\n            }\\n\\n            // @dev growthFund Rate \\uc801\\uc6a9\\ud558\\uc5ec \\ud560\\ub2f9\\n            _allocatedGrowthFunds[token] += amount * getGrowthFundRate(_pool);\\n\\n            emit Collect(_pool, token, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe8e73d3eab8307a9f7e5e7001470ee0ad384187bce68fee88690d969effe32f6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMasterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice pool deployer interface.\\ninterface IMasterDeployer {\\n    // ============ EVENTS ================\\n    event DeployPool(address indexed factory, address indexed pool, bytes deployData);\\n    event AddToWhitelistFactory(address indexed factory);\\n    event RemoveFromWhitelistFactory(address indexed factory);\\n    event ProtocolFeeToUpdated(address protocolFeeTo);\\n\\n    /// @notice create pool through factory\\n    function deployPool(address factory, bytes calldata deployData) external returns (address);\\n\\n    /// @notice Return the address receiving protocol fees from Pool\\n    function protocolFeeTo() external view returns (address);\\n\\n    /// @notice Return whether the pool was deployed via a deployer\\n    function pools(address pool) external view returns (bool);\\n\\n    /// @notice LP Airdrop Distributor address\\n    function airdropDistributor() external returns (address);\\n\\n    /// @notice Return the number of pools deployed from masterDeployer\\n    function totalPoolsCount() external view returns (uint256 total);\\n\\n    /// @notice Return the address of pool by index\\n    function getPoolAddress(uint256 idx) external view returns (address pool);\\n\\n    /// @notice Return the address of Factory deployed pool\\n    function getFactoryAddress(address pool) external view returns (address factory);\\n}\\n\",\"keccak256\":\"0x78e000c156708cab98e97c281e357b4e5e000174f1b914ea5acdcd11181e4203\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IProtocolFeePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IProtocolFeePool {\\n    function collectProtocolFee() external returns (uint128, uint128);\\n\\n    function getTokenProtocolFees() external view returns (uint128, uint128);\\n}\\n\",\"keccak256\":\"0x137888a9d081059d203de8220f16426113be2114f857784c4257d9876593339b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IProtocolRevenueShare.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IProtocolRevenueShareEvent {\\n    // @notice \\ub9ac\\uc6cc\\ub4dc \\uc218\\uc9d1 \\uc2dc \\ud638\\ucd9c\\n    event Collect(address indexed pool, address indexed token, uint256 amount);\\n\\n    // @notice \\ud1a0\\ud070\\uc744 \\uc2a4\\uc651 \\ud6c4 \\ubd84\\ubc30 \\uc2dc \\ud638\\ucd9c\\n    event Share(\\n        address indexed feeToken,\\n        address indexed revenueToken,\\n        uint256 amount,\\n        uint256 output,\\n        uint256 growthFundShare,\\n        uint256 daoFundShare\\n    );\\n\\n    // @notice revenue Token \\ubcc0\\uacbd \\uc2dc \\ud638\\ucd9c\\n    event SetRevenueToken(address token);\\n\\n    // @notice GrowthFund \\ubcc0\\uacbd \\uc2dc \\ud638\\ucd9c\\n    event SetGrowthFund(address fund);\\n\\n    // @notice DaoFund \\ubcc0\\uacbd \\uc2dc \\ud638\\ucd9c\\n    event SetDaoFund(address fund);\\n\\n    // @notice \\ucd5c\\uc18c \\uc218\\uc775 \\uae30\\uc900 \\ubcc0\\uacbd\\uc2dc \\ud638\\ucd9c\\n    event SetMinimumRevenue(uint256 amount);\\n\\n    // @notice Growth Fund Rate \\ubcc0\\uacbd\\uc2dc \\ud638\\ucd9c\\n    event SetGrowthFundRate(address pool, uint256 rate);\\n\\n    // @notice Factory Growth Fund Rate \\ubcc0\\uacbd\\uc2dc \\ud638\\ucd9c\\n    event SetFactoryGrowthFundRate(address factory, uint256 rate);\\n\\n    // @notice \\ube0c\\ub85c\\ucee4 verify \\uc5ec\\ubd80 \\ubcc0\\uacbd \\uc2dc \\ud638\\ucd9c\\n    event VerifyBroker(address broker, bool isVerified);\\n\\n    // @notice \\ud2b9\\uc815 \\ud480\\uc5d0\\uc11c \\uc218\\uc218\\ub8cc \\uc218\\ucde8\\ub97c \\ub9c9\\uc744 \\ub54c \\ud638\\ucd9c\\n    event SetSkipCollect(address pool, bool skip);\\n}\\n\\ninterface IProtocolRevenueShare is IProtocolRevenueShareEvent {\\n    // @notice \\ud310\\uac8c\\uc544\\uc2a4\\uc651\\uc758 \\ud480\\ub4e4\\uc5d0\\uc11c\\ubd80\\ud130 \\uc218\\uc218\\ub8cc \\uc218\\ucde8 \\ud638\\ucd9c\\n    function collectByPage(uint256 start, uint256 limit) external;\\n\\n    // @notice \\ud2b9\\uc815 \\ud480\\uc5d0\\uc11c \\ud504\\ub85c\\ud1a0\\ucf5c \\uc218\\uc775 \\ubaa8\\uc73c\\uae30\\n    function collectFrom(address pool) external;\\n\\n    // @notice \\ud480\\uc5d0\\uc11c \\ubc1c\\uc0dd\\ud55c \\uc218\\uc775\\uc744 \\uc2a4\\uc651 \\ud6c4, Growth Fund\\uc640 Dao Fund\\ub85c \\ubd84\\ubc30\\n    // @param feeToken \\ud504\\ub85c\\ud1a0\\ucf5c\\uc5d0\\uc11c \\ubc1c\\uc0dd\\ud55c \\uc218\\uc775 \\ud1a0\\ud070\\n    // @param minimumOutput \\uc2a4\\uc651\\ud560 \\uacbd\\uc6b0, \\uc2ac\\ub9ac\\ud53c\\uc9c0\\ub97c \\uace0\\ub824\\ud55c output\\n    // @param broker feeToken\\uc744 revenueToken\\uc73c\\ub85c \\uc804\\ud658\\uc744 \\uc218\\ud589\\ud558\\ub294 \\ucee8\\ud2b8\\ub799\\ud2b8 ( pangeaswap pool Router, swap Scanner, 1inch, ...)\\n    // @param data broker \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c\\uc758 \\ucf5c\\ubc31 \\ub370\\uc774\\ud130\\n    function share(address feeToken, uint256 minimumOutput, address payable broker, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xd5ca38ba68015710ff6c8d1178b6caede4600c3366ba930a728417893cf321a8\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function depositTo(address to) external payable;\\n\\n    function withdrawTo(address payable to, uint256 value) external;\\n}\\n\",\"keccak256\":\"0x3df7d2d850b39e7532c1370d414ba6f225a07fa3d176cafcdb70f330e15a1c1b\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library that facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol.\\n/// @dev Handles \\\"phantom overflow\\\", i.e., allows multiplication and division where an intermediate value overflows 256 bits.\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b.\\n            // Compute the product mod 2**256 and mod 2**256 - 1,\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product.\\n            uint256 prod1; // Most significant 256 bits of the product.\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n            // Make sure the result is less than 2**256 -\\n            // also prevents denominator == 0.\\n            require(denominator > prod1);\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n            // Make division exact by subtracting the remainder from [prod1 prod0] -\\n            // compute remainder using mulmod.\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number.\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n            // Factor powers of two out of denominator -\\n            // compute largest power of two divisor of denominator\\n            // (always >= 1).\\n            uint256 twos = uint256(-int256(denominator)) & denominator;\\n            // Divide denominator by power of two.\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n            // Divide [prod1 prod0] by the factors of two.\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos -\\n            // if twos is zero, then it becomes one.\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n            // Invert denominator mod 2**256 -\\n            // now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // for four bits. That is, denominator * inv = 1 mod 2**4.\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**8.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**16.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**32.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**64.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**128.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**256.\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    function mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        unchecked {\\n            if (mulmod(a, b, denominator) != 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf07624e0963ebbaedd9e8d8f0a2d34c9abc0834d94367dd60bc7f3d5b56efcd1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102535760003560e01c80637118c6d711610138578063c0c53b8b116100b0578063d547741f1161007f578063ec87621c11610064578063ec87621c14610777578063ef0ef77d1461078c578063f0332830146107ac57600080fd5b8063d547741f1461072a578063dbcd58e21461074a57600080fd5b8063c0c53b8b146106a7578063c128ceaa146106c7578063c5483d42146106e7578063cf58879a146106fd57600080fd5b8063a217fddf11610107578063ac9650d8116100ec578063ac9650d81461063a578063b048ea0814610667578063bbff840d1461068757600080fd5b8063a217fddf14610605578063a6898cba1461061a57600080fd5b80637118c6d7146105285780638729c828146105555780638d934f741461058557806391d14854146105b257600080fd5b80634ca8a395116101cb5780635d67c9fd1161019a57806362167eef1161017f57806362167eef146104b857806362f2c352146104e857806370f7d3731461050857600080fd5b80635d67c9fd146104785780635ddc84ce1461049857600080fd5b80634ca8a395146103c4578063556e4e68146103d957806359e3dc221461042b5780635c3640ec1461044b57600080fd5b80632f2ff15d116102225780633865aba4116102075780633865aba414610354578063396a7dd1146103745780634675d25b146103af57600080fd5b80632f2ff15d1461031457806336568abe1461033457600080fd5b806301ffc9a71461025f5780630d56dace14610294578063248a9ca3146102b65780632c559d27146102f457600080fd5b3661025a57005b600080fd5b34801561026b57600080fd5b5061027f61027a366004613c75565b6107cc565b60405190151581526020015b60405180910390f35b3480156102a057600080fd5b506102b46102af366004613cd9565b610865565b005b3480156102c257600080fd5b506102e66102d1366004613d05565b60009081526065602052604090206001015490565b60405190815260200161028b565b34801561030057600080fd5b506102b461030f366004613d1e565b610a4a565b34801561032057600080fd5b506102b461032f366004613d3b565b610ba2565b34801561034057600080fd5b506102b461034f366004613d3b565b610bcc565b34801561036057600080fd5b506102b461036f366004613d1e565b610c7f565b34801561038057600080fd5b5061039461038f366004613d1e565b610dea565b6040805193845260208401929092529082015260600161028b565b3480156103bb57600080fd5b506102e6610ee2565b3480156103d057600080fd5b5060a4546102e6565b3480156103e557600080fd5b506098546104069073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161028b565b34801561043757600080fd5b506102b4610446366004613d79565b610f3c565b34801561045757600080fd5b50609b546104069073ffffffffffffffffffffffffffffffffffffffff1681565b34801561048457600080fd5b506102b4610493366004613d1e565b611138565b3480156104a457600080fd5b506102b46104b3366004613d05565b611288565b3480156104c457600080fd5b5061027f6104d3366004613d1e565b60a26020526000908152604090205460ff1681565b3480156104f457600080fd5b506102b4610503366004613da7565b611387565b34801561051457600080fd5b506102b4610523366004613cd9565b611765565b34801561053457600080fd5b50610548610543366004613da7565b61193c565b60405161028b9190613dc9565b34801561056157600080fd5b5061027f610570366004613d1e565b60a66020526000908152604090205460ff1681565b34801561059157600080fd5b50609c546104069073ffffffffffffffffffffffffffffffffffffffff1681565b3480156105be57600080fd5b5061027f6105cd366004613d3b565b600091825260656020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b34801561061157600080fd5b506102e6600081565b34801561062657600080fd5b506102b4610635366004613e23565b611a35565b34801561064657600080fd5b5061065a610655366004613ec2565b611c41565b60405161028b9190613fad565b34801561067357600080fd5b506102b461068236600461402d565b611d2f565b34801561069357600080fd5b506102b46106a2366004613d79565b611fa1565b3480156106b357600080fd5b506102b46106c2366004614078565b612105565b3480156106d357600080fd5b506102e66106e2366004613d1e565b61247b565b3480156106f357600080fd5b506102e660995481565b34801561070957600080fd5b506097546104069073ffffffffffffffffffffffffffffffffffffffff1681565b34801561073657600080fd5b506102b4610745366004613d3b565b612638565b34801561075657600080fd5b50609a546104069073ffffffffffffffffffffffffffffffffffffffff1681565b34801561078357600080fd5b506102e661265d565b34801561079857600080fd5b506102b46107a7366004613d1e565b61269e565b3480156107b857600080fd5b506102b46107c73660046141c5565b6127ee565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061085f57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6040516020016108a69060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b604051602081830303815290604052805190602001206108c581612a68565b73ffffffffffffffffffffffffffffffffffffffff8316610947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e4f545f5a45524f00000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6127108211156109b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f544f4f5f42494700000000000000000000000000000000000000000000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff83166000818152609d60209081526040808320869055609e82529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815192835282018490527f9a7f36cb92c3a48741577312e190fb527f1d8a2f05eed281ccdcf054f9f3499991015b60405180910390a1505050565b604051602001610a8b9060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b60405160208183030381529060405280519060200120610aaa81612a68565b73ffffffffffffffffffffffffffffffffffffffff8216610b27576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e4f545f5a45524f000000000000000000000000000000000000000000000000604482015260640161093e565b609c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527f61850c638ae43fda9dfdc1a96c2b322ebc66d14e4d77e2030e0a4a84371e8b44906020015b60405180910390a15050565b600082815260656020526040902060010154610bbd81612a68565b610bc78383612a75565b505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610c71576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161093e565b610c7b8282612b69565b5050565b604051602001610cc09060208082526002908201527f4f50000000000000000000000000000000000000000000000000000000000000604082015260600190565b60405160208183030381529060405280519060200120610cdf81612a68565b60a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416908117909155600090815260a6602052604090205460ff1615610d3d575050565b8173ffffffffffffffffffffffffffffffffffffffff1663caa4b46a6040518163ffffffff1660e01b81526004016040805180830381600087803b158015610d8457600080fd5b505af1158015610d98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbc91906142a7565b505060a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000908190819073ffffffffffffffffffffffffffffffffffffffff8516906370a082319060240160206040518083038186803b158015610e5657600080fd5b505afa158015610e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8e91906142da565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260a16020526040902054909350610ece908490610ec961271083614322565b612c24565b9150610eda828461435f565b929491935050565b604051602001610f239060208082526002908201527f4f50000000000000000000000000000000000000000000000000000000000000604082015260600190565b6040516020818303038152906040528051906020012081565b604051602001610f7d9060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b60405160208183030381529060405280519060200120610f9c81612a68565b6097546040517fa4063dbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015290911690819063a4063dbc9060240160206040518083038186803b15801561100957600080fd5b505afa15801561101d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110419190614376565b6110a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e4f5420504f4f4c000000000000000000000000000000000000000000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff8416600081815260a6602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168715159081179091558251938452908301527faa0e5829e6847f080b2193417ffa7be83545cc72d0a5a24e716404af42da412a91015b60405180910390a150505050565b6040516020016111799060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b6040516020818303038152906040528051906020012061119881612a68565b73ffffffffffffffffffffffffffffffffffffffff8216611215576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e4f545f5a45524f000000000000000000000000000000000000000000000000604482015260640161093e565b609b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527fb80d9b26e906c9f0ff398547e2d990aacc9c1f9fe96bb81e75783992f6d9f03b90602001610b96565b6040516020016112c99060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b604051602081830303815290604052805190602001206112e881612a68565b60008211611352576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e4f545f5a45524f000000000000000000000000000000000000000000000000604482015260640161093e565b60998290556040518281527f129533e18daf1d480fd24e5a1fc61ccb2f504e6898df5c22684e8d42d5a1449e90602001610b96565b6040516020016113c89060208082526002908201527f4f50000000000000000000000000000000000000000000000000000000000000604082015260600190565b604051602081830303815290604052805190602001206113e781612a68565b609754604080517f566a89af000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216916000916114a191849163566a89af916004808301926020929190829003018186803b15801561145a57600080fd5b505afa15801561146e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149291906142da565b61149c8688614393565b612cf6565b90508085106114b1575050505050565b845b81811015611735576040517ea5ae210000000000000000000000000000000000000000000000000000000081526004810182905260009073ffffffffffffffffffffffffffffffffffffffff85169062a5ae219060240160206040518083038186803b15801561152257600080fd5b505afa158015611536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155a91906143ab565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260a6602052604090205490915060ff16156115915750611723565b6000808273ffffffffffffffffffffffffffffffffffffffff1663fb5d80b36040518163ffffffff1660e01b8152600401604080518083038186803b1580156115d957600080fd5b505afa1580156115ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161191906142a7565b91509150816fffffffffffffffffffffffffffffffff16600014801561164757506fffffffffffffffffffffffffffffffff8116155b1561165457505050611723565b60a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516908117909155604080517fcaa4b46a000000000000000000000000000000000000000000000000000000008152815163caa4b46a926004808401939192918290030181600087803b1580156116e557600080fd5b505af11580156116f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171d91906142a7565b50505050505b8061172d816143c8565b9150506114b3565b505060a380547fffffffffffffffffffffffff000000000000000000000000000000000000000016905550505050565b6040516020016117a69060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b604051602081830303815290604052805190602001206117c581612a68565b73ffffffffffffffffffffffffffffffffffffffff8316611842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e4f545f5a45524f000000000000000000000000000000000000000000000000604482015260640161093e565b6127108211156118ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f544f4f5f42494700000000000000000000000000000000000000000000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff83166000818152609f6020908152604080832086905560a082529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815192835282018490527f1b8b6a5cc8e5560e91b8aa7116fdc7929ea43d2ba0793e20a51bf1cfbeebc0369101610a3d565b6060611948838361435f565b67ffffffffffffffff811115611960576119606140b8565b604051908082528060200260200182016040528015611989578160200160208202803683370190505b50905061199b8260a480549050612cf6565b9150825b82811015611a2e5760a481815481106119ba576119ba614401565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282815181106119f7576119f7614401565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280611a26816143c8565b91505061199f565b5092915050565b604051602001611a769060208082526002908201527f4f50000000000000000000000000000000000000000000000000000000000000604082015260600190565b60405160208183030381529060405280519060200120611a9581612a68565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8816906370a082319060240160206040518083038186803b158015611afd57600080fd5b505afa158015611b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3591906142da565b90506000611b47888389898989612d0c565b9050600080611b578a858561335d565b609854919350915073ffffffffffffffffffffffffffffffffffffffff168215611ba257609b54611ba29073ffffffffffffffffffffffffffffffffffffffff8381169116856133e1565b8115611bcf57609c54611bcf9073ffffffffffffffffffffffffffffffffffffffff8381169116846133e1565b60408051868152602081018690529081018490526060810183905273ffffffffffffffffffffffffffffffffffffffff80831691908d16907f56513147cc739e1e937e841a2c24d310a5abf7a27ef52dfc8e4c67e97425a0779060800160405180910390a35050505050505050505050565b60608167ffffffffffffffff811115611c5c57611c5c6140b8565b604051908082528060200260200182016040528015611c8f57816020015b6060815260200190600190039081611c7a5790505b50905060005b82811015611a2e57611cff30858584818110611cb357611cb3614401565b9050602002810190611cc59190614430565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061346e92505050565b828281518110611d1157611d11614401565b60200260200101819052508080611d27906143c8565b915050611c95565b604051602001611d709060208082526002908201527f4f50000000000000000000000000000000000000000000000000000000000000604082015260600190565b60405160208183030381529060405280519060200120611d8f81612a68565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260a2602052604090205460ff16611e1e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e4f545f56455249464544000000000000000000000000000000000000000000604482015260640161093e565b8115611ef1576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602483015284169063095ea7b390604401602060405180830381600087803b158015611eb357600080fd5b505af1158015611ec7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eeb9190614376565b50611f9b565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526000602483015284169063095ea7b390604401602060405180830381600087803b158015611f6157600080fd5b505af1158015611f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f999190614376565b505b50505050565b604051602001611fe29060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b6040516020818303038152906040528051906020012061200181612a68565b73ffffffffffffffffffffffffffffffffffffffff831661207e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e4f545f5a45524f000000000000000000000000000000000000000000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260a2602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168615159081179091558251938452908301527f2f7544148bd36bd1f673c67408962ce71e2c72f682ffe3a3649e3f3b8eb729e19101610a3d565b600054610100900460ff16158080156121255750600054600160ff909116105b8061213f5750303b15801561213f575060005460ff166001145b6121cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161093e565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561222957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b73ffffffffffffffffffffffffffffffffffffffff84166122a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff8316612323576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff82166123a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015260640161093e565b6097805473ffffffffffffffffffffffffffffffffffffffff8087167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560988054868416908316179055609a805492851692909116919091179055620f4240609955612411613493565b61241c60003361352c565b8015611f9b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200161112a565b73ffffffffffffffffffffffffffffffffffffffff81166000908152609e602052604081205460ff16156124d2575073ffffffffffffffffffffffffffffffffffffffff166000908152609d602052604090205490565b6097546040517fa7bce75500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152600092169063a7bce7559060240160206040518083038186803b15801561253e57600080fd5b505afa158015612552573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257691906143ab565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260a0602052604090205490915060ff16612608576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f545f53455455500000000000000000000000000000000000000000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff166000908152609f602052604090205492915050565b919050565b60008281526065602052604090206001015461265381612a68565b610bc78383612b69565b604051602001610f239060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b6040516020016126df9060208082526007908201527f4d414e4147455200000000000000000000000000000000000000000000000000604082015260600190565b604051602081830303815290604052805190602001206126fe81612a68565b73ffffffffffffffffffffffffffffffffffffffff821661277b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e4f545f5a45524f000000000000000000000000000000000000000000000000604482015260640161093e565b609880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527fc06258a22dd82acd4aca5423e3a0da8420e7e6408be33120b7e3c999115e5c7d90602001610b96565b60a354339073ffffffffffffffffffffffffffffffffffffffff168114612871576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e4f5420414c4c4f574544000000000000000000000000000000000000000000604482015260640161093e565b60005b8351811015611f9b57600084828151811061289157612891614401565b6020026020010151905060008483815181106128af576128af614401565b6020026020010151905080600014156128c9575050612a56565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260a5602052604090205460ff1661299d5760a4805460018082019092557fe434dc35da084cf8d7e8186688ea2dacb53db7003d427af3abf351bd9d0a4e8d0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516908117909155600090815260a56020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790555b6129a68461247b565b6129b09082614322565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260a16020526040812080549091906129e5908490614393565b925050819055508173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f1314fd112a381beea61539dbd21ec04afcff2662ac7d1b83273aade1f53d1b9783604051612a4b91815260200190565b60405180910390a350505b80612a60816143c8565b915050612874565b612a728133613536565b50565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610c7b57600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055612b0b3390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1615610c7b57600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415612c7c5760008411612c7157600080fd5b508290049050612cef565b808411612c8857600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b6000818310612d055781612cef565b5090919050565b609a5460985460009173ffffffffffffffffffffffffffffffffffffffff908116918116908916811415612d44578792505050613353565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015612dac57600080fd5b505afa158015612dc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de491906142da565b73ffffffffffffffffffffffffffffffffffffffff8816600090815260a2602052604090205490915060ff16612e76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4e4f545f56455249464945445f42524f4b455200000000000000000000000000604482015260640161093e565b60008a73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612fa1576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018b905273ffffffffffffffffffffffffffffffffffffffff851690632e1a7d4d90602401600060405180830381600087803b158015612f1457600080fd5b505af1158015612f28573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff168a8888604051612f5492919061449c565b60006040518083038185875af1925050503d8060008114612f91576040519150601f19603f3d011682016040523d82523d6000602084013e612f96565b606091505b505080915050613166565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff89811660248301528c169063dd62ed3e9060440160206040518083038186803b15801561300e57600080fd5b505afa158015613022573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304691906142da565b8a11156130f7576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152602482018c90528c169063095ea7b390604401602060405180830381600087803b1580156130bd57600080fd5b505af11580156130d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130f59190614376565b505b8773ffffffffffffffffffffffffffffffffffffffff16878760405161311e92919061449c565b6000604051808303816000865af19150503d806000811461315b576040519150601f19603f3d011682016040523d82523d6000602084013e613160565b606091505b50909150505b806131cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f42524f4b45525f4641494c000000000000000000000000000000000000000000604482015260640161093e565b506040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8416906370a082319060240160206040518083038186803b15801561323557600080fd5b505afa158015613249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326d91906142da565b613277919061435f565b9350878410156132e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f534c495050414745000000000000000000000000000000000000000000000000604482015260640161093e565b60995484101561334f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4d494e494d554d20524556454e55450000000000000000000000000000000000604482015260640161093e565b5050505b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260a160205260408120548190613397908490610ec961271088614322565b73ffffffffffffffffffffffffffffffffffffffff8616600090815260a1602052604081205591508183116133cd5760006133d7565b6133d7828461435f565b9050935093915050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610bc7908490613608565b6060612cef838360405180606001604052806027815260200161459260279139613714565b600054610100900460ff1661352a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161093e565b565b610c7b8282612a75565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610c7b5761358e8173ffffffffffffffffffffffffffffffffffffffff166014613832565b613599836020613832565b6040516020016135aa9291906144ac565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261093e9160040161452d565b600061366a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613a759092919063ffffffff16565b805190915015610bc757808060200190518101906136889190614376565b610bc7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161093e565b606073ffffffffffffffffffffffffffffffffffffffff84163b6137ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161093e565b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516137e29190614540565b600060405180830381855af49150503d806000811461381d576040519150601f19603f3d011682016040523d82523d6000602084013e613822565b606091505b5091509150613353828286613a8c565b60606000613841836002614322565b61384c906002614393565b67ffffffffffffffff811115613864576138646140b8565b6040519080825280601f01601f19166020018201604052801561388e576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106138c5576138c5614401565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061392857613928614401565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000613964846002614322565b61396f906001614393565b90505b6001811115613a0c577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106139b0576139b0614401565b1a60f81b8282815181106139c6576139c6614401565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93613a058161455c565b9050613972565b508315612cef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161093e565b6060613a848484600085613adf565b949350505050565b60608315613a9b575081612cef565b825115613aab5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093e919061452d565b606082471015613b71576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161093e565b73ffffffffffffffffffffffffffffffffffffffff85163b613bef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161093e565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613c189190614540565b60006040518083038185875af1925050503d8060008114613c55576040519150601f19603f3d011682016040523d82523d6000602084013e613c5a565b606091505b5091509150613c6a828286613a8c565b979650505050505050565b600060208284031215613c8757600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114612cef57600080fd5b73ffffffffffffffffffffffffffffffffffffffff81168114612a7257600080fd5b60008060408385031215613cec57600080fd5b8235613cf781613cb7565b946020939093013593505050565b600060208284031215613d1757600080fd5b5035919050565b600060208284031215613d3057600080fd5b8135612cef81613cb7565b60008060408385031215613d4e57600080fd5b823591506020830135613d6081613cb7565b809150509250929050565b8015158114612a7257600080fd5b60008060408385031215613d8c57600080fd5b8235613d9781613cb7565b91506020830135613d6081613d6b565b60008060408385031215613dba57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015613e1757835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101613de5565b50909695505050505050565b600080600080600060808688031215613e3b57600080fd5b8535613e4681613cb7565b9450602086013593506040860135613e5d81613cb7565b9250606086013567ffffffffffffffff80821115613e7a57600080fd5b818801915088601f830112613e8e57600080fd5b813581811115613e9d57600080fd5b896020828501011115613eaf57600080fd5b9699959850939650602001949392505050565b60008060208385031215613ed557600080fd5b823567ffffffffffffffff80821115613eed57600080fd5b818501915085601f830112613f0157600080fd5b813581811115613f1057600080fd5b8660208260051b8501011115613f2557600080fd5b60209290920196919550909350505050565b60005b83811015613f52578181015183820152602001613f3a565b83811115611f9b5750506000910152565b60008151808452613f7b816020860160208601613f37565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614020577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261400e858351613f63565b94509285019290850190600101613fd4565b5092979650505050505050565b60008060006060848603121561404257600080fd5b833561404d81613cb7565b9250602084013561405d81613cb7565b9150604084013561406d81613d6b565b809150509250925092565b60008060006060848603121561408d57600080fd5b833561409881613cb7565b925060208401356140a881613cb7565b9150604084013561406d81613cb7565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561412e5761412e6140b8565b604052919050565b600067ffffffffffffffff821115614150576141506140b8565b5060051b60200190565b600082601f83011261416b57600080fd5b8135602061418061417b83614136565b6140e7565b82815260059290921b8401810191818101908684111561419f57600080fd5b8286015b848110156141ba57803583529183019183016141a3565b509695505050505050565b600080604083850312156141d857600080fd5b823567ffffffffffffffff808211156141f057600080fd5b818501915085601f83011261420457600080fd5b8135602061421461417b83614136565b82815260059290921b8401810191818101908984111561423357600080fd5b948201945b8386101561425a57853561424b81613cb7565b82529482019490820190614238565b9650508601359250508082111561427057600080fd5b5061427d8582860161415a565b9150509250929050565b80516fffffffffffffffffffffffffffffffff8116811461263357600080fd5b600080604083850312156142ba57600080fd5b6142c383614287565b91506142d160208401614287565b90509250929050565b6000602082840312156142ec57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561435a5761435a6142f3565b500290565b600082821015614371576143716142f3565b500390565b60006020828403121561438857600080fd5b8151612cef81613d6b565b600082198211156143a6576143a66142f3565b500190565b6000602082840312156143bd57600080fd5b8151612cef81613cb7565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156143fa576143fa6142f3565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261446557600080fd5b83018035915067ffffffffffffffff82111561448057600080fd5b60200191503681900382131561449557600080fd5b9250929050565b8183823760009101908152919050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516144e4816017850160208801613f37565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614521816028840160208801613f37565b01602801949350505050565b602081526000612cef6020830184613f63565b60008251614552818460208701613f37565b9190910192915050565b60008161456b5761456b6142f3565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203473c6a1ae4cd3bf6285168bd91a8382bb6ab56669e6121eecee1eac307ad90364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allocateRevenue(address)": {
        "notice": "특정 토큰에 대한 Revenue 비율 파악"
      },
      "collectByPage(uint256,uint256)": {
        "notice": "deployer에서 순회하며, 수수료 수취 호출"
      },
      "collectFeeCallback(address[],uint256[])": {
        "notice": "Callback 함수 (Pool에서 호출)"
      },
      "collectFrom(address)": {
        "notice": "특정 풀에서 프로토콜 수익 모으기"
      }
    },
    "notice": "판게아스왑 프로토콜 수수료 분배를 담당하는 컨트랙트",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 419,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 422,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 847,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1117,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3056,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "masterDeployer",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 3058,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "revenueToken",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 3060,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "minimumRevenue",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 3062,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "wklay",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 3064,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "growthFund",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      },
      {
        "astId": 3066,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "daoFund",
        "offset": 0,
        "slot": "156",
        "type": "t_address"
      },
      {
        "astId": 3070,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "_growthFundRate",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3074,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "_setupGrowthFundRate",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3078,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "_factoryGrowthFundRate",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3082,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "_setupFactoryGrowthFundRate",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3086,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "_allocatedGrowthFunds",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3090,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "isVerifiedBroker",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3092,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "cachedPool",
        "offset": 0,
        "slot": "163",
        "type": "t_address"
      },
      {
        "astId": 3095,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "_feeTokens",
        "offset": 0,
        "slot": "164",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3099,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "isFee",
        "offset": 0,
        "slot": "165",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3103,
        "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
        "label": "skipCollect",
        "offset": 0,
        "slot": "166",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/ProtocolRevenueShare.sol:ProtocolRevenueShare",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}